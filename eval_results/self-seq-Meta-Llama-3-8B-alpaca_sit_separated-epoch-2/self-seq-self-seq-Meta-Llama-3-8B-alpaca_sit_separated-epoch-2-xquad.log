1
data/test/xquad_base_en.json
cuda
INFO 06-17 05:08:47 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:08:47 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2)
[1;36m(VllmWorkerProcess pid=281223)[0;0m INFO 06-17 05:08:54 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=281223)[0;0m INFO 06-17 05:08:54 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 05:08:54 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=281223)[0;0m INFO 06-17 05:08:54 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:08:54 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=281223)[0;0m INFO 06-17 05:08:55 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:08:55 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:08:55 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=281223)[0;0m INFO 06-17 05:08:55 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:09:30 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=281223)[0;0m INFO 06-17 05:09:30 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:09:32 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 05:09:45 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:09:45 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=281223)[0;0m INFO 06-17 05:09:45 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=281223)[0;0m INFO 06-17 05:09:45 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=281223)[0;0m INFO 06-17 05:10:09 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:10:09 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=281223)[0;0m INFO 06-17 05:10:09 model_runner.py:965] Graph capturing finished in 24 secs.
INFO 06-17 05:10:09 model_runner.py:965] Graph capturing finished in 24 secs.
Using 2 GPU devices
INFO 06-17 05:10:31 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_de.json
cuda
INFO 06-17 05:10:41 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:10:41 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2)
[1;36m(VllmWorkerProcess pid=283336)[0;0m INFO 06-17 05:10:47 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 05:10:48 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=283336)[0;0m INFO 06-17 05:10:48 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 05:10:48 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=283336)[0;0m INFO 06-17 05:10:48 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=283336)[0;0m INFO 06-17 05:10:48 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:10:48 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:10:49 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=283336)[0;0m INFO 06-17 05:10:49 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:11:22 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=283336)[0;0m INFO 06-17 05:11:23 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:11:24 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=283336)[0;0m INFO 06-17 05:11:37 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=283336)[0;0m INFO 06-17 05:11:37 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 05:11:37 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:11:37 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=283336)[0;0m INFO 06-17 05:11:57 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:11:57 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=283336)[0;0m INFO 06-17 05:11:57 model_runner.py:965] Graph capturing finished in 20 secs.
INFO 06-17 05:11:57 model_runner.py:965] Graph capturing finished in 20 secs.
Using 2 GPU devices
INFO 06-17 05:12:22 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_es.json
cuda
INFO 06-17 05:12:32 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:12:32 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2)
[1;36m(VllmWorkerProcess pid=285447)[0;0m INFO 06-17 05:12:39 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=285447)[0;0m INFO 06-17 05:12:40 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 05:12:40 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=285447)[0;0m INFO 06-17 05:12:40 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:12:40 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=285447)[0;0m INFO 06-17 05:12:40 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:12:40 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:12:41 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=285447)[0;0m INFO 06-17 05:12:41 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:13:16 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=285447)[0;0m INFO 06-17 05:13:16 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:13:17 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=285447)[0;0m INFO 06-17 05:13:30 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=285447)[0;0m INFO 06-17 05:13:30 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 05:13:31 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:13:31 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=285447)[0;0m INFO 06-17 05:13:53 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:13:53 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=285447)[0;0m INFO 06-17 05:13:53 model_runner.py:965] Graph capturing finished in 23 secs.
INFO 06-17 05:13:53 model_runner.py:965] Graph capturing finished in 23 secs.
Using 2 GPU devices
INFO 06-17 05:14:21 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_ru.json
cuda
INFO 06-17 05:14:31 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:14:31 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2)
[1;36m(VllmWorkerProcess pid=287547)[0;0m INFO 06-17 05:14:38 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 05:14:38 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=287547)[0;0m INFO 06-17 05:14:38 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=287547)[0;0m INFO 06-17 05:14:38 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:14:38 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:14:39 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=287547)[0;0m INFO 06-17 05:14:39 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:14:39 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=287547)[0;0m INFO 06-17 05:14:39 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:15:13 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=287547)[0;0m INFO 06-17 05:15:13 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:15:15 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 05:15:28 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:15:28 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=287547)[0;0m INFO 06-17 05:15:28 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=287547)[0;0m INFO 06-17 05:15:28 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=287547)[0;0m INFO 06-17 05:15:50 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:15:50 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=287547)[0;0m INFO 06-17 05:15:50 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 05:15:50 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
1
data/test/xquad_base_zh.json
cuda
INFO 06-17 05:16:30 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:16:30 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2)
[1;36m(VllmWorkerProcess pid=289654)[0;0m INFO 06-17 05:16:36 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 05:16:37 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=289654)[0;0m INFO 06-17 05:16:37 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=289654)[0;0m INFO 06-17 05:16:37 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:16:37 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:16:37 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=289654)[0;0m INFO 06-17 05:16:37 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:16:37 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=289654)[0;0m INFO 06-17 05:16:38 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:17:11 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=289654)[0;0m INFO 06-17 05:17:12 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:17:13 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 05:17:26 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:17:26 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=289654)[0;0m INFO 06-17 05:17:26 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=289654)[0;0m INFO 06-17 05:17:26 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=289654)[0;0m INFO 06-17 05:17:47 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:17:47 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=289654)[0;0m INFO 06-17 05:17:47 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 05:17:47 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 05:18:12 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_ar.json
cuda
INFO 06-17 05:18:23 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:18:23 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2)
[1;36m(VllmWorkerProcess pid=291752)[0;0m INFO 06-17 05:18:30 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=291752)[0;0m INFO 06-17 05:18:30 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 05:18:30 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=291752)[0;0m INFO 06-17 05:18:30 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:18:30 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:18:30 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=291752)[0;0m INFO 06-17 05:18:30 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:18:31 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=291752)[0;0m INFO 06-17 05:18:31 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:19:02 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=291752)[0;0m INFO 06-17 05:19:05 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:19:07 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=291752)[0;0m INFO 06-17 05:19:20 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=291752)[0;0m INFO 06-17 05:19:20 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 05:19:20 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:19:20 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=291752)[0;0m INFO 06-17 05:19:42 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:19:42 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=291752)[0;0m INFO 06-17 05:19:42 model_runner.py:965] Graph capturing finished in 23 secs.
INFO 06-17 05:19:42 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 05:20:11 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_vi.json
cuda
INFO 06-17 05:20:21 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:20:21 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2)
[1;36m(VllmWorkerProcess pid=293866)[0;0m INFO 06-17 05:20:28 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=293866)[0;0m INFO 06-17 05:20:28 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 05:20:28 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=293866)[0;0m INFO 06-17 05:20:28 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:20:28 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:20:29 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=293866)[0;0m INFO 06-17 05:20:29 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:20:29 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=293866)[0;0m INFO 06-17 05:20:29 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:21:05 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=293866)[0;0m INFO 06-17 05:21:05 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:21:06 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 05:21:19 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:21:19 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=293866)[0;0m INFO 06-17 05:21:19 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=293866)[0;0m INFO 06-17 05:21:19 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=293866)[0;0m INFO 06-17 05:21:40 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:21:40 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=293866)[0;0m INFO 06-17 05:21:40 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 05:21:40 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 05:22:04 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_th.json
cuda
INFO 06-17 05:22:14 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:22:14 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2)
[1;36m(VllmWorkerProcess pid=295967)[0;0m INFO 06-17 05:22:21 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=295967)[0;0m INFO 06-17 05:22:21 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 05:22:21 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=295967)[0;0m INFO 06-17 05:22:21 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:22:21 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=295967)[0;0m INFO 06-17 05:22:21 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:22:21 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:22:22 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=295967)[0;0m INFO 06-17 05:22:22 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:22:56 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=295967)[0;0m INFO 06-17 05:22:56 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:22:58 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 05:23:11 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:23:11 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=295967)[0;0m INFO 06-17 05:23:11 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=295967)[0;0m INFO 06-17 05:23:11 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=295967)[0;0m INFO 06-17 05:23:31 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:23:31 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=295967)[0;0m INFO 06-17 05:23:31 model_runner.py:965] Graph capturing finished in 20 secs.
INFO 06-17 05:23:31 model_runner.py:965] Graph capturing finished in 20 secs.
Using 2 GPU devices
INFO 06-17 05:24:06 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_tr.json
cuda
INFO 06-17 05:24:16 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:24:16 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2)
[1;36m(VllmWorkerProcess pid=298070)[0;0m INFO 06-17 05:24:22 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=298070)[0;0m INFO 06-17 05:24:22 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 05:24:22 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=298070)[0;0m INFO 06-17 05:24:22 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:24:22 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=298070)[0;0m INFO 06-17 05:24:23 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:24:23 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:24:23 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=298070)[0;0m INFO 06-17 05:24:24 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:24:58 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=298070)[0;0m INFO 06-17 05:24:58 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:24:59 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=298070)[0;0m INFO 06-17 05:25:12 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=298070)[0;0m INFO 06-17 05:25:12 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 05:25:12 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:25:12 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=298070)[0;0m INFO 06-17 05:25:33 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:25:33 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=298070)[0;0m INFO 06-17 05:25:33 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 05:25:33 model_runner.py:965] Graph capturing finished in 20 secs.
Using 2 GPU devices
1
data/test/xquad_trans_hi.json
cuda
INFO 06-17 05:26:06 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:26:06 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_separated-epoch-2)
[1;36m(VllmWorkerProcess pid=300189)[0;0m INFO 06-17 05:26:13 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 05:26:13 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=300189)[0;0m INFO 06-17 05:26:13 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=300189)[0;0m INFO 06-17 05:26:13 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:26:13 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:26:14 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=300189)[0;0m INFO 06-17 05:26:14 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:26:14 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=300189)[0;0m INFO 06-17 05:26:15 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:26:49 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=300189)[0;0m INFO 06-17 05:26:49 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:26:50 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 05:27:03 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:27:03 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=300189)[0;0m INFO 06-17 05:27:03 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=300189)[0;0m INFO 06-17 05:27:03 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=300189)[0;0m INFO 06-17 05:27:25 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:27:25 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=300189)[0;0m INFO 06-17 05:27:25 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 05:27:25 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 05:28:01 multiproc_worker_utils.py:123] Killing local vLLM worker processes
