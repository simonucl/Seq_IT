Loading data...
Loading model and tokenizer...
INFO 05-17 19:26:41 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='output/self-seq-Mistral-7B-v0.1-alpaca_sit_2', speculative_config=None, tokenizer='output/self-seq-Mistral-7B-v0.1-alpaca_sit_2', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 05-17 19:26:44 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1094799)[0m INFO 05-17 19:26:44 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 05-17 19:26:44 selector.py:26] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1094799)[0m INFO 05-17 19:26:45 selector.py:26] Using FlashAttention-2 backend.
INFO 05-17 19:26:46 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1094799)[0m INFO 05-17 19:26:46 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 05-17 19:26:47 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1094799)[0m INFO 05-17 19:26:47 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1094799)[0m INFO 05-17 19:27:07 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-17 19:27:07 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-17 19:27:09 distributed_gpu_executor.py:45] # GPU blocks: 60255, # CPU blocks: 4096
INFO 05-17 19:27:11 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 05-17 19:27:11 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1094799)[0m INFO 05-17 19:27:11 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1094799)[0m INFO 05-17 19:27:11 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-17 19:27:17 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 05-17 19:27:17 model_runner.py:953] Graph capturing finished in 7 secs.
[36m(RayWorkerWrapper pid=1094799)[0m INFO 05-17 19:27:17 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1094799)[0m INFO 05-17 19:27:17 model_runner.py:953] Graph capturing finished in 7 secs.
Calculating accuracy...
Exact match : 0.07884761182714177
Loading data...
Loading model and tokenizer...
INFO 05-17 19:28:16 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='output/self-seq-Mistral-7B-v0.1-alpaca_sit_2', speculative_config=None, tokenizer='output/self-seq-Mistral-7B-v0.1-alpaca_sit_2', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 05-17 19:28:19 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1096904)[0m INFO 05-17 19:28:19 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 05-17 19:28:19 selector.py:26] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1096904)[0m INFO 05-17 19:28:20 selector.py:26] Using FlashAttention-2 backend.
INFO 05-17 19:28:21 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1096904)[0m INFO 05-17 19:28:21 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 05-17 19:28:23 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1096904)[0m INFO 05-17 19:28:23 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1096904)[0m INFO 05-17 19:28:42 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-17 19:28:42 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-17 19:28:44 distributed_gpu_executor.py:45] # GPU blocks: 60255, # CPU blocks: 4096
[36m(RayWorkerWrapper pid=1096904)[0m INFO 05-17 19:28:45 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1096904)[0m INFO 05-17 19:28:45 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-17 19:28:45 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 05-17 19:28:45 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-17 19:28:53 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1096904)[0m INFO 05-17 19:28:53 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 05-17 19:28:53 model_runner.py:953] Graph capturing finished in 8 secs.
[36m(RayWorkerWrapper pid=1096904)[0m INFO 05-17 19:28:53 model_runner.py:953] Graph capturing finished in 8 secs.
Calculating accuracy...
Exact match for en: 0.084
Calculating accuracy...
Exact match for es: 0.04
Calculating accuracy...
Exact match for fr: 0.064
Calculating accuracy...
Exact match for de: 0.028
Calculating accuracy...
Exact match for ru: 0.028
Calculating accuracy...
Exact match for zh: 0.016
Calculating accuracy...
Exact match for ja: 0.008
Calculating accuracy...
Exact match for th: 0.012
Calculating accuracy...
Exact match for sw: 0.008
Calculating accuracy...
Exact match for bn: 0.024
Calculating accuracy...
Exact match for te: 0.008
Loading data...
Loading model and tokenizer...
INFO 05-17 19:35:27 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='output/self-seq-Mistral-7B-v0.1-alpaca_sit_2', speculative_config=None, tokenizer='output/self-seq-Mistral-7B-v0.1-alpaca_sit_2', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 05-17 19:35:30 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1099029)[0m INFO 05-17 19:35:30 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 05-17 19:35:30 selector.py:26] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1099029)[0m INFO 05-17 19:35:31 selector.py:26] Using FlashAttention-2 backend.
INFO 05-17 19:35:32 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1099029)[0m INFO 05-17 19:35:32 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 05-17 19:35:33 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1099029)[0m INFO 05-17 19:35:33 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 05-17 19:35:53 model_runner.py:172] Loading model weights took 6.7544 GB
[36m(RayWorkerWrapper pid=1099029)[0m INFO 05-17 19:35:53 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-17 19:35:55 distributed_gpu_executor.py:45] # GPU blocks: 60255, # CPU blocks: 4096
INFO 05-17 19:35:56 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 05-17 19:35:56 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1099029)[0m INFO 05-17 19:35:56 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1099029)[0m INFO 05-17 19:35:56 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-17 19:36:04 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 05-17 19:36:04 model_runner.py:953] Graph capturing finished in 8 secs.
[36m(RayWorkerWrapper pid=1099029)[0m INFO 05-17 19:36:04 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1099029)[0m INFO 05-17 19:36:04 model_runner.py:953] Graph capturing finished in 8 secs.
Calculating accuracy...
Exact match for en: 0.116
Calculating accuracy...
Exact match for es: 0.052
Calculating accuracy...
Exact match for fr: 0.044
Calculating accuracy...
Exact match for de: 0.044
Calculating accuracy...
Exact match for ru: 0.064
Calculating accuracy...
Exact match for zh: 0.012
Calculating accuracy...
Exact match for ja: 0.016
Calculating accuracy...
Exact match for th: 0.016
Calculating accuracy...
Exact match for sw: 0.008
Calculating accuracy...
Exact match for bn: 0.008
Calculating accuracy...
Exact match for te: 0.008
Number of examples: 164
INFO 05-17 19:42:35 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='output/self-seq-Mistral-7B-v0.1-alpaca_sit_2', speculative_config=None, tokenizer='output/self-seq-Mistral-7B-v0.1-alpaca_sit_2', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 05-17 19:42:38 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1100988)[0m INFO 05-17 19:42:38 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 05-17 19:42:39 selector.py:26] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1100988)[0m INFO 05-17 19:42:39 selector.py:26] Using FlashAttention-2 backend.
INFO 05-17 19:42:40 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1100988)[0m INFO 05-17 19:42:40 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 05-17 19:42:41 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1100988)[0m INFO 05-17 19:42:41 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 05-17 19:43:00 model_runner.py:172] Loading model weights took 6.7544 GB
[36m(RayWorkerWrapper pid=1100988)[0m INFO 05-17 19:43:00 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-17 19:43:02 distributed_gpu_executor.py:45] # GPU blocks: 60255, # CPU blocks: 4096
INFO 05-17 19:43:04 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 05-17 19:43:04 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1100988)[0m INFO 05-17 19:43:04 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1100988)[0m INFO 05-17 19:43:04 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-17 19:43:07 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 05-17 19:43:07 model_runner.py:953] Graph capturing finished in 3 secs.
[36m(RayWorkerWrapper pid=1100988)[0m INFO 05-17 19:43:07 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1100988)[0m INFO 05-17 19:43:07 model_runner.py:953] Graph capturing finished in 3 secs.
Reading samples...
Running test suites...
Running test suites...
Writing results to results/codex_humaneval/{self-seq-self-seq-Mistral-7B-v0.1-alpaca_sit_2}_temp_0_8/codex_eval_predictions.jsonl_results.jsonl...
{'pass@10': 0.07184710064533367}
