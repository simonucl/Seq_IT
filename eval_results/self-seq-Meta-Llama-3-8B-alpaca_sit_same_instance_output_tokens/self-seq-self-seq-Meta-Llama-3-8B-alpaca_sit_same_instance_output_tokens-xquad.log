1
data/test/xquad_base_en.json
cuda
INFO 06-17 04:47:02 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:47:02 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=260137)[0;0m INFO 06-17 04:47:09 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=260137)[0;0m INFO 06-17 04:47:09 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:47:09 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=260137)[0;0m INFO 06-17 04:47:09 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:47:09 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:47:10 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=260137)[0;0m INFO 06-17 04:47:10 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=260137)[0;0m INFO 06-17 04:47:10 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:47:10 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=260137)[0;0m INFO 06-17 04:47:44 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:47:45 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:47:46 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:47:59 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:47:59 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=260137)[0;0m INFO 06-17 04:47:59 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=260137)[0;0m INFO 06-17 04:47:59 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=260137)[0;0m INFO 06-17 04:48:20 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:48:20 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=260137)[0;0m INFO 06-17 04:48:20 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:48:20 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:48:39 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_de.json
cuda
INFO 06-17 04:48:50 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:48:50 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=262242)[0;0m INFO 06-17 04:48:57 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=262242)[0;0m INFO 06-17 04:48:58 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:48:58 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=262242)[0;0m INFO 06-17 04:48:58 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:48:58 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=262242)[0;0m INFO 06-17 04:48:58 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:48:58 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:48:58 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=262242)[0;0m INFO 06-17 04:48:58 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=262242)[0;0m INFO 06-17 04:49:33 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:49:33 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:49:34 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=262242)[0;0m INFO 06-17 04:49:47 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=262242)[0;0m INFO 06-17 04:49:47 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:49:47 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:49:47 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=262242)[0;0m INFO 06-17 04:50:08 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:50:08 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=262242)[0;0m INFO 06-17 04:50:08 model_runner.py:965] Graph capturing finished in 20 secs.
INFO 06-17 04:50:08 model_runner.py:965] Graph capturing finished in 20 secs.
Using 2 GPU devices
INFO 06-17 04:50:44 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_es.json
cuda
INFO 06-17 04:50:55 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:50:55 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=264355)[0;0m INFO 06-17 04:51:02 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=264355)[0;0m INFO 06-17 04:51:02 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:51:02 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=264355)[0;0m INFO 06-17 04:51:02 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:51:02 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:51:02 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=264355)[0;0m INFO 06-17 04:51:02 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:51:03 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=264355)[0;0m INFO 06-17 04:51:03 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=264355)[0;0m INFO 06-17 04:51:38 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:51:38 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:51:39 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=264355)[0;0m INFO 06-17 04:51:52 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=264355)[0;0m INFO 06-17 04:51:52 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:51:52 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:51:52 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=264355)[0;0m INFO 06-17 04:52:14 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:52:14 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=264355)[0;0m INFO 06-17 04:52:14 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:52:14 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:52:53 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_ru.json
cuda
INFO 06-17 04:53:02 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:53:02 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=266455)[0;0m INFO 06-17 04:53:09 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=266455)[0;0m INFO 06-17 04:53:09 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:53:09 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=266455)[0;0m INFO 06-17 04:53:09 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:53:09 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:53:10 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=266455)[0;0m INFO 06-17 04:53:10 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:53:10 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=266455)[0;0m INFO 06-17 04:53:10 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:53:44 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=266455)[0;0m INFO 06-17 04:53:44 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:53:45 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:53:58 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:53:58 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=266455)[0;0m INFO 06-17 04:53:58 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=266455)[0;0m INFO 06-17 04:53:58 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=266455)[0;0m INFO 06-17 04:54:20 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:54:20 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=266455)[0;0m INFO 06-17 04:54:20 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:54:20 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 04:55:04 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_zh.json
cuda
INFO 06-17 04:55:14 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:55:14 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=268556)[0;0m INFO 06-17 04:55:21 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=268556)[0;0m INFO 06-17 04:55:21 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:55:21 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=268556)[0;0m INFO 06-17 04:55:21 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:55:21 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=268556)[0;0m INFO 06-17 04:55:21 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:55:21 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:55:22 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=268556)[0;0m INFO 06-17 04:55:22 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=268556)[0;0m INFO 06-17 04:55:57 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:55:57 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:55:58 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:56:11 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:56:11 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=268556)[0;0m INFO 06-17 04:56:11 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=268556)[0;0m INFO 06-17 04:56:11 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=268556)[0;0m INFO 06-17 04:56:33 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:56:33 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=268556)[0;0m INFO 06-17 04:56:33 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:56:33 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
1
data/test/xquad_trans_ar.json
cuda
INFO 06-17 04:57:22 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:57:22 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=270681)[0;0m INFO 06-17 04:57:28 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=270681)[0;0m INFO 06-17 04:57:28 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:57:28 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=270681)[0;0m INFO 06-17 04:57:28 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:57:28 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:57:29 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=270681)[0;0m INFO 06-17 04:57:29 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=270681)[0;0m INFO 06-17 04:57:29 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:57:29 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:58:04 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=270681)[0;0m INFO 06-17 04:58:04 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:58:05 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:58:19 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:58:19 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=270681)[0;0m INFO 06-17 04:58:19 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=270681)[0;0m INFO 06-17 04:58:19 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=270681)[0;0m INFO 06-17 04:58:40 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:58:40 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=270681)[0;0m INFO 06-17 04:58:40 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:58:40 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 04:59:31 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_vi.json
cuda
INFO 06-17 04:59:41 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:59:41 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=272787)[0;0m INFO 06-17 04:59:47 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=272787)[0;0m INFO 06-17 04:59:47 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:59:47 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=272787)[0;0m INFO 06-17 04:59:47 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:59:47 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:59:48 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=272787)[0;0m INFO 06-17 04:59:48 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:59:48 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=272787)[0;0m INFO 06-17 04:59:48 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:00:22 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=272787)[0;0m INFO 06-17 05:00:22 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:00:24 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 05:00:37 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:00:37 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=272787)[0;0m INFO 06-17 05:00:37 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=272787)[0;0m INFO 06-17 05:00:37 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=272787)[0;0m INFO 06-17 05:00:59 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:00:59 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=272787)[0;0m INFO 06-17 05:00:59 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 05:00:59 model_runner.py:965] Graph capturing finished in 23 secs.
Using 2 GPU devices
INFO 06-17 05:01:39 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_th.json
cuda
INFO 06-17 05:01:50 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:01:50 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=274890)[0;0m INFO 06-17 05:01:57 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=274890)[0;0m INFO 06-17 05:01:57 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 05:01:57 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=274890)[0;0m INFO 06-17 05:01:57 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:01:57 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:01:57 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=274890)[0;0m INFO 06-17 05:01:57 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:01:58 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=274890)[0;0m INFO 06-17 05:01:58 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:02:33 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=274890)[0;0m INFO 06-17 05:02:33 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:02:35 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 05:02:47 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:02:47 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=274890)[0;0m INFO 06-17 05:02:48 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=274890)[0;0m INFO 06-17 05:02:48 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=274890)[0;0m INFO 06-17 05:03:10 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:03:10 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=274890)[0;0m INFO 06-17 05:03:10 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 05:03:10 model_runner.py:965] Graph capturing finished in 23 secs.
Using 2 GPU devices
INFO 06-17 05:04:01 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_tr.json
cuda
INFO 06-17 05:04:12 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:04:12 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=276996)[0;0m INFO 06-17 05:04:19 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=276996)[0;0m INFO 06-17 05:04:19 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 05:04:19 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=276996)[0;0m INFO 06-17 05:04:19 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:04:19 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:04:19 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=276996)[0;0m INFO 06-17 05:04:19 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:04:20 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=276996)[0;0m INFO 06-17 05:04:20 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=276996)[0;0m INFO 06-17 05:04:55 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:04:55 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:04:57 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 05:05:10 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:05:10 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=276996)[0;0m INFO 06-17 05:05:10 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=276996)[0;0m INFO 06-17 05:05:10 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=276996)[0;0m INFO 06-17 05:05:34 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:05:34 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=276996)[0;0m INFO 06-17 05:05:34 model_runner.py:965] Graph capturing finished in 24 secs.
INFO 06-17 05:05:34 model_runner.py:965] Graph capturing finished in 24 secs.
Using 2 GPU devices
1
data/test/xquad_trans_hi.json
cuda
INFO 06-17 05:06:28 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:06:28 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=279116)[0;0m INFO 06-17 05:06:35 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 05:06:35 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=279116)[0;0m INFO 06-17 05:06:35 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=279116)[0;0m INFO 06-17 05:06:35 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:06:35 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:06:35 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=279116)[0;0m INFO 06-17 05:06:35 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:06:36 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=279116)[0;0m INFO 06-17 05:06:36 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:07:10 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=279116)[0;0m INFO 06-17 05:07:10 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:07:11 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 05:07:24 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:07:24 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=279116)[0;0m INFO 06-17 05:07:25 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=279116)[0;0m INFO 06-17 05:07:25 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=279116)[0;0m INFO 06-17 05:07:46 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:07:46 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=279116)[0;0m INFO 06-17 05:07:46 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 05:07:46 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 05:08:36 multiproc_worker_utils.py:123] Killing local vLLM worker processes
