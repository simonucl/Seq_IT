1
data/test/xquad_trans_el.json
cuda
INFO 06-17 16:51:56 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 16:51:56 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=371335)[0;0m INFO 06-17 16:52:03 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=371335)[0;0m INFO 06-17 16:52:03 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 16:52:03 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=371335)[0;0m INFO 06-17 16:52:03 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 16:52:03 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 16:52:04 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=371335)[0;0m INFO 06-17 16:52:04 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 16:52:04 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=371335)[0;0m INFO 06-17 16:52:04 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 16:52:40 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=371335)[0;0m INFO 06-17 16:52:40 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 16:52:42 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 16:52:54 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 16:52:54 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=371335)[0;0m INFO 06-17 16:52:55 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=371335)[0;0m INFO 06-17 16:52:55 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=371335)[0;0m INFO 06-17 16:53:16 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 16:53:16 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=371335)[0;0m INFO 06-17 16:53:16 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 16:53:16 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 16:53:58 multiproc_worker_utils.py:123] Killing local vLLM worker processes
