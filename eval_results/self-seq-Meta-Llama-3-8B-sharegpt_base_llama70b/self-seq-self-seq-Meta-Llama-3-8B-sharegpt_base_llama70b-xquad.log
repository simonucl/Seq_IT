1
data/test/xquad_base_en.json
cuda
INFO 06-13 00:05:49 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-13 00:05:54 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1712941)[0m INFO 06-13 00:05:54 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-13 00:05:54 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1712941)[0m INFO 06-13 00:05:55 selector.py:28] Using FlashAttention-2 backend.
INFO 06-13 00:05:56 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1712941)[0m INFO 06-13 00:05:56 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-13 00:05:57 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1712941)[0m INFO 06-13 00:05:57 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-13 00:05:58 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1712941)[0m INFO 06-13 00:05:58 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1712941)[0m INFO 06-13 00:06:16 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:06:22 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:06:23 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-13 00:06:25 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-13 00:06:25 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1712941)[0m INFO 06-13 00:06:25 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1712941)[0m INFO 06-13 00:06:25 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-13 00:06:32 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-13 00:06:32 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1712941)[0m INFO 06-13 00:06:32 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1712941)[0m INFO 06-13 00:06:32 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_base_de.json
cuda
INFO 06-13 00:07:02 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-13 00:07:07 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1714911)[0m INFO 06-13 00:07:07 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-13 00:07:07 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1714911)[0m INFO 06-13 00:07:08 selector.py:28] Using FlashAttention-2 backend.
INFO 06-13 00:07:08 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1714911)[0m INFO 06-13 00:07:08 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-13 00:07:09 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1714911)[0m INFO 06-13 00:07:09 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-13 00:07:10 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1714911)[0m INFO 06-13 00:07:10 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-13 00:07:32 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1714911)[0m INFO 06-13 00:07:33 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:07:34 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-13 00:07:36 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-13 00:07:36 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1714911)[0m INFO 06-13 00:07:36 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1714911)[0m INFO 06-13 00:07:36 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-13 00:07:43 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-13 00:07:43 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1714911)[0m INFO 06-13 00:07:43 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1714911)[0m INFO 06-13 00:07:43 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_base_es.json
cuda
INFO 06-13 00:08:22 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-13 00:08:27 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1716870)[0m INFO 06-13 00:08:27 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-13 00:08:27 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1716870)[0m INFO 06-13 00:08:28 selector.py:28] Using FlashAttention-2 backend.
INFO 06-13 00:08:29 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1716870)[0m INFO 06-13 00:08:29 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-13 00:08:30 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1716870)[0m INFO 06-13 00:08:30 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-13 00:08:31 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1716870)[0m INFO 06-13 00:08:31 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-13 00:08:53 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1716870)[0m INFO 06-13 00:08:53 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:08:55 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-13 00:08:56 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-13 00:08:56 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1716870)[0m INFO 06-13 00:08:56 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1716870)[0m INFO 06-13 00:08:56 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-13 00:09:04 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-13 00:09:04 model_runner.py:953] Graph capturing finished in 8 secs.
[36m(RayWorkerWrapper pid=1716870)[0m INFO 06-13 00:09:04 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1716870)[0m INFO 06-13 00:09:04 model_runner.py:953] Graph capturing finished in 8 secs.
Using 2 GPU devices
1
data/test/xquad_base_ru.json
cuda
INFO 06-13 00:09:43 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-13 00:09:48 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1718832)[0m INFO 06-13 00:09:48 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-13 00:09:48 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1718832)[0m INFO 06-13 00:09:49 selector.py:28] Using FlashAttention-2 backend.
INFO 06-13 00:09:49 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1718832)[0m INFO 06-13 00:09:49 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-13 00:09:50 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1718832)[0m INFO 06-13 00:09:50 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-13 00:09:51 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1718832)[0m INFO 06-13 00:09:51 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1718832)[0m INFO 06-13 00:10:13 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:10:14 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:10:15 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-13 00:10:17 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-13 00:10:17 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1718832)[0m INFO 06-13 00:10:17 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1718832)[0m INFO 06-13 00:10:17 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-13 00:10:23 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-13 00:10:23 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1718832)[0m INFO 06-13 00:10:23 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1718832)[0m INFO 06-13 00:10:23 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_base_zh.json
cuda
INFO 06-13 00:11:06 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-13 00:11:11 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1720804)[0m INFO 06-13 00:11:11 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-13 00:11:11 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1720804)[0m INFO 06-13 00:11:12 selector.py:28] Using FlashAttention-2 backend.
INFO 06-13 00:11:12 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1720804)[0m INFO 06-13 00:11:12 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-13 00:11:14 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1720804)[0m INFO 06-13 00:11:14 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1720804)[0m INFO 06-13 00:11:15 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-13 00:11:15 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-13 00:11:37 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1720804)[0m INFO 06-13 00:11:37 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:11:38 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-13 00:11:40 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-13 00:11:40 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1720804)[0m INFO 06-13 00:11:40 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1720804)[0m INFO 06-13 00:11:40 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-13 00:11:47 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-13 00:11:47 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1720804)[0m INFO 06-13 00:11:47 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1720804)[0m INFO 06-13 00:11:47 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_trans_ar.json
cuda
INFO 06-13 00:12:24 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-13 00:12:29 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1722763)[0m INFO 06-13 00:12:29 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-13 00:12:29 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1722763)[0m INFO 06-13 00:12:30 selector.py:28] Using FlashAttention-2 backend.
INFO 06-13 00:12:30 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1722763)[0m INFO 06-13 00:12:30 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-13 00:12:31 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1722763)[0m INFO 06-13 00:12:31 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-13 00:12:32 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1722763)[0m INFO 06-13 00:12:32 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-13 00:12:54 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1722763)[0m INFO 06-13 00:12:55 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:12:56 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-13 00:12:58 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-13 00:12:58 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1722763)[0m INFO 06-13 00:12:58 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1722763)[0m INFO 06-13 00:12:58 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-13 00:13:04 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-13 00:13:04 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1722763)[0m INFO 06-13 00:13:04 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1722763)[0m INFO 06-13 00:13:04 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_trans_vi.json
cuda
INFO 06-13 00:13:47 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-13 00:13:52 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1724725)[0m INFO 06-13 00:13:52 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-13 00:13:52 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1724725)[0m INFO 06-13 00:13:53 selector.py:28] Using FlashAttention-2 backend.
INFO 06-13 00:13:53 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1724725)[0m INFO 06-13 00:13:53 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-13 00:13:55 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1724725)[0m INFO 06-13 00:13:55 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-13 00:13:56 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1724725)[0m INFO 06-13 00:13:56 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-13 00:14:18 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1724725)[0m INFO 06-13 00:14:19 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:14:20 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-13 00:14:22 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-13 00:14:22 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1724725)[0m INFO 06-13 00:14:22 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1724725)[0m INFO 06-13 00:14:22 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-13 00:14:29 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-13 00:14:29 model_runner.py:953] Graph capturing finished in 7 secs.
[36m(RayWorkerWrapper pid=1724725)[0m INFO 06-13 00:14:29 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1724725)[0m INFO 06-13 00:14:29 model_runner.py:953] Graph capturing finished in 7 secs.
Using 2 GPU devices
1
data/test/xquad_trans_th.json
cuda
INFO 06-13 00:15:06 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-13 00:15:11 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1726682)[0m INFO 06-13 00:15:11 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-13 00:15:11 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1726682)[0m INFO 06-13 00:15:12 selector.py:28] Using FlashAttention-2 backend.
INFO 06-13 00:15:12 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1726682)[0m INFO 06-13 00:15:12 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-13 00:15:13 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1726682)[0m INFO 06-13 00:15:13 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-13 00:15:14 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1726682)[0m INFO 06-13 00:15:15 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-13 00:15:36 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1726682)[0m INFO 06-13 00:15:37 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:15:39 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-13 00:15:41 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-13 00:15:41 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1726682)[0m INFO 06-13 00:15:41 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1726682)[0m INFO 06-13 00:15:41 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-13 00:15:47 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-13 00:15:47 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1726682)[0m INFO 06-13 00:15:47 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1726682)[0m INFO 06-13 00:15:47 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_trans_tr.json
cuda
INFO 06-13 00:16:32 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-13 00:16:36 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1728641)[0m INFO 06-13 00:16:36 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-13 00:16:37 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1728641)[0m INFO 06-13 00:16:38 selector.py:28] Using FlashAttention-2 backend.
INFO 06-13 00:16:38 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1728641)[0m INFO 06-13 00:16:38 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-13 00:16:39 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1728641)[0m INFO 06-13 00:16:39 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-13 00:16:40 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1728641)[0m INFO 06-13 00:16:40 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-13 00:17:02 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1728641)[0m INFO 06-13 00:17:03 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:17:05 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-13 00:17:07 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-13 00:17:07 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1728641)[0m INFO 06-13 00:17:07 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1728641)[0m INFO 06-13 00:17:07 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-13 00:17:13 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-13 00:17:13 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1728641)[0m INFO 06-13 00:17:13 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1728641)[0m INFO 06-13 00:17:13 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_trans_hi.json
cuda
INFO 06-13 00:17:52 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-13 00:17:56 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1730599)[0m INFO 06-13 00:17:56 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-13 00:17:57 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1730599)[0m INFO 06-13 00:17:58 selector.py:28] Using FlashAttention-2 backend.
INFO 06-13 00:17:58 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1730599)[0m INFO 06-13 00:17:58 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-13 00:17:59 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1730599)[0m INFO 06-13 00:17:59 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-13 00:18:00 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1730599)[0m INFO 06-13 00:18:01 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-13 00:18:23 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1730599)[0m INFO 06-13 00:18:23 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-13 00:18:25 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-13 00:18:27 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-13 00:18:27 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1730599)[0m INFO 06-13 00:18:27 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1730599)[0m INFO 06-13 00:18:27 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-13 00:18:33 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-13 00:18:33 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1730599)[0m INFO 06-13 00:18:33 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1730599)[0m INFO 06-13 00:18:33 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
