Loading data...
Loading model and tokenizer...
INFO 06-12 23:22:56 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:23:00 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1187034)[0m INFO 06-12 23:23:00 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:23:00 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1187034)[0m INFO 06-12 23:23:01 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:23:03 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1187034)[0m INFO 06-12 23:23:03 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:23:04 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1187034)[0m INFO 06-12 23:23:04 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:23:05 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1187034)[0m INFO 06-12 23:23:05 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1187034)[0m INFO 06-12 23:27:29 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:27:29 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:27:31 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 23:27:33 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:27:33 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1187034)[0m INFO 06-12 23:27:33 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1187034)[0m INFO 06-12 23:27:33 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:27:42 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:27:42 model_runner.py:953] Graph capturing finished in 9 secs.
[36m(RayWorkerWrapper pid=1187034)[0m INFO 06-12 23:27:42 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1187034)[0m INFO 06-12 23:27:42 model_runner.py:953] Graph capturing finished in 9 secs.
Calculating accuracy...
Exact match : 0.310841546626232
Loading data...
Loading model and tokenizer...
INFO 06-12 23:29:11 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:29:16 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1189173)[0m INFO 06-12 23:29:16 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:29:16 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1189173)[0m INFO 06-12 23:29:17 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:29:18 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1189173)[0m INFO 06-12 23:29:18 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:29:20 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1189173)[0m INFO 06-12 23:29:20 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:29:21 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1189173)[0m INFO 06-12 23:29:21 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:29:42 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1189173)[0m INFO 06-12 23:29:44 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:29:45 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 23:29:47 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:29:47 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1189173)[0m INFO 06-12 23:29:47 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1189173)[0m INFO 06-12 23:29:47 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:29:56 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:29:56 model_runner.py:953] Graph capturing finished in 9 secs.
[36m(RayWorkerWrapper pid=1189173)[0m INFO 06-12 23:29:56 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1189173)[0m INFO 06-12 23:29:56 model_runner.py:953] Graph capturing finished in 9 secs.
Calculating accuracy...
Exact match for en: 0.308
Calculating accuracy...
Exact match for es: 0.312
Calculating accuracy...
Exact match for fr: 0.328
Calculating accuracy...
Exact match for de: 0.264
Calculating accuracy...
Exact match for ru: 0.296
Calculating accuracy...
Exact match for zh: 0.26
Calculating accuracy...
Exact match for ja: 0.216
Calculating accuracy...
Exact match for th: 0.24
Calculating accuracy...
Exact match for sw: 0.156
Calculating accuracy...
Exact match for bn: 0.212
Calculating accuracy...
Exact match for te: 0.136
Loading data...
Loading model and tokenizer...
INFO 06-12 23:34:57 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:35:02 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1191311)[0m INFO 06-12 23:35:02 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:35:02 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1191311)[0m INFO 06-12 23:35:03 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:35:04 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1191311)[0m INFO 06-12 23:35:04 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:35:05 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1191311)[0m INFO 06-12 23:35:05 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:35:06 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1191311)[0m INFO 06-12 23:35:06 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:35:28 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1191311)[0m INFO 06-12 23:35:29 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:35:31 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 23:35:32 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:35:32 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1191311)[0m INFO 06-12 23:35:32 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1191311)[0m INFO 06-12 23:35:32 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:35:42 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:35:42 model_runner.py:953] Graph capturing finished in 10 secs.
[36m(RayWorkerWrapper pid=1191311)[0m INFO 06-12 23:35:42 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1191311)[0m INFO 06-12 23:35:42 model_runner.py:953] Graph capturing finished in 10 secs.
Calculating accuracy...
Exact match for en: 0.336
Calculating accuracy...
Exact match for es: 0.232
Calculating accuracy...
Exact match for fr: 0.196
Calculating accuracy...
Exact match for de: 0.192
Calculating accuracy...
Exact match for ru: 0.208
Calculating accuracy...
Exact match for zh: 0.272
Calculating accuracy...
Exact match for ja: 0.164
Calculating accuracy...
Exact match for th: 0.268
Calculating accuracy...
Exact match for sw: 0.096
Calculating accuracy...
Exact match for bn: 0.164
Calculating accuracy...
Exact match for te: 0.16
Number of examples: 164
INFO 06-12 23:41:41 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:41:45 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1193309)[0m INFO 06-12 23:41:45 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:41:46 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1193309)[0m INFO 06-12 23:41:46 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:41:47 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1193309)[0m INFO 06-12 23:41:47 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:41:48 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1193309)[0m INFO 06-12 23:41:48 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:41:49 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1193309)[0m INFO 06-12 23:41:49 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:42:11 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1193309)[0m INFO 06-12 23:42:13 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:42:14 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 23:42:16 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:42:16 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1193309)[0m INFO 06-12 23:42:16 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1193309)[0m INFO 06-12 23:42:16 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:42:22 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:42:22 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1193309)[0m INFO 06-12 23:42:22 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1193309)[0m INFO 06-12 23:42:22 model_runner.py:953] Graph capturing finished in 6 secs.
Reading samples...
Running test suites...
Writing results to results/codex_humaneval/{self-seq-self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b}_temp_0_8/codex_eval_predictions.jsonl_results.jsonl...
{'pass@10': 0.5966485328837137}
INFO 06-12 23:48:59 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-sharegpt_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:49:03 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1703152)[0m INFO 06-12 23:49:03 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:49:04 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1703152)[0m INFO 06-12 23:49:04 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:49:06 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1703152)[0m INFO 06-12 23:49:06 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:49:07 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1703152)[0m INFO 06-12 23:49:07 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:49:08 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1703152)[0m INFO 06-12 23:49:08 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:49:30 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1703152)[0m INFO 06-12 23:49:31 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:49:32 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 23:49:34 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:49:34 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1703152)[0m INFO 06-12 23:49:34 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1703152)[0m INFO 06-12 23:49:34 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:49:40 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:49:40 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1703152)[0m INFO 06-12 23:49:40 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1703152)[0m INFO 06-12 23:49:40 model_runner.py:953] Graph capturing finished in 6 secs.
