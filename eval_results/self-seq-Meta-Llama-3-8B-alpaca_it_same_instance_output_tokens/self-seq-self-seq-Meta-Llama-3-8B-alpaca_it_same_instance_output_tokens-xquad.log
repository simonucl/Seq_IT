1
data/test/xquad_base_en.json
cuda
INFO 06-17 04:27:32 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:27:32 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=239074)[0;0m INFO 06-17 04:27:39 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 04:27:39 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=239074)[0;0m INFO 06-17 04:27:39 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=239074)[0;0m INFO 06-17 04:27:39 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:27:39 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:27:39 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=239074)[0;0m INFO 06-17 04:27:39 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:27:40 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=239074)[0;0m INFO 06-17 04:27:40 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=239074)[0;0m INFO 06-17 04:28:14 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:28:14 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:28:15 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=239074)[0;0m INFO 06-17 04:28:28 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=239074)[0;0m INFO 06-17 04:28:28 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:28:28 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:28:28 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=239074)[0;0m INFO 06-17 04:28:50 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:28:50 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=239074)[0;0m INFO 06-17 04:28:50 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:28:50 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:29:11 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_de.json
cuda
INFO 06-17 04:29:22 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:29:22 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=241176)[0;0m INFO 06-17 04:29:29 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=241176)[0;0m INFO 06-17 04:29:29 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:29:29 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=241176)[0;0m INFO 06-17 04:29:29 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:29:29 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=241176)[0;0m INFO 06-17 04:29:29 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:29:29 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:29:30 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=241176)[0;0m INFO 06-17 04:29:30 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:30:05 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=241176)[0;0m INFO 06-17 04:30:05 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:30:07 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=241176)[0;0m INFO 06-17 04:30:20 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=241176)[0;0m INFO 06-17 04:30:20 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:30:20 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:30:20 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=241176)[0;0m INFO 06-17 04:30:41 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:30:41 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=241176)[0;0m INFO 06-17 04:30:41 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:30:41 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:31:08 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_es.json
cuda
INFO 06-17 04:31:18 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:31:18 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=243276)[0;0m INFO 06-17 04:31:24 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=243276)[0;0m INFO 06-17 04:31:24 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:31:24 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=243276)[0;0m INFO 06-17 04:31:24 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:31:24 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=243276)[0;0m INFO 06-17 04:31:25 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:31:25 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:31:25 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=243276)[0;0m INFO 06-17 04:31:26 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:31:59 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=243276)[0;0m INFO 06-17 04:32:00 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:32:01 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=243276)[0;0m INFO 06-17 04:32:14 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=243276)[0;0m INFO 06-17 04:32:14 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:32:14 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:32:14 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=243276)[0;0m INFO 06-17 04:32:35 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:32:35 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=243276)[0;0m INFO 06-17 04:32:35 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:32:35 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:33:04 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_ru.json
cuda
INFO 06-17 04:33:14 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:33:14 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=245381)[0;0m INFO 06-17 04:33:20 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=245381)[0;0m INFO 06-17 04:33:20 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:33:20 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=245381)[0;0m INFO 06-17 04:33:20 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:33:20 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:33:21 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=245381)[0;0m INFO 06-17 04:33:21 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:33:21 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=245381)[0;0m INFO 06-17 04:33:21 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:33:55 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=245381)[0;0m INFO 06-17 04:33:55 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:33:57 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:34:10 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:34:10 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=245381)[0;0m INFO 06-17 04:34:10 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=245381)[0;0m INFO 06-17 04:34:10 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=245381)[0;0m INFO 06-17 04:34:29 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:34:29 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=245381)[0;0m INFO 06-17 04:34:29 model_runner.py:965] Graph capturing finished in 20 secs.
INFO 06-17 04:34:29 model_runner.py:965] Graph capturing finished in 20 secs.
Using 2 GPU devices
INFO 06-17 04:35:00 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_zh.json
cuda
INFO 06-17 04:35:11 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:35:11 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=247485)[0;0m INFO 06-17 04:35:18 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=247485)[0;0m INFO 06-17 04:35:18 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:35:18 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=247485)[0;0m INFO 06-17 04:35:18 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:35:18 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=247485)[0;0m INFO 06-17 04:35:19 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:35:19 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=247485)[0;0m INFO 06-17 04:35:19 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:35:19 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=247485)[0;0m INFO 06-17 04:35:53 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:35:53 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:35:55 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:36:07 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:36:07 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=247485)[0;0m INFO 06-17 04:36:08 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=247485)[0;0m INFO 06-17 04:36:08 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=247485)[0;0m INFO 06-17 04:36:30 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:36:30 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=247485)[0;0m INFO 06-17 04:36:30 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:36:30 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 04:36:56 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_ar.json
cuda
INFO 06-17 04:37:07 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:37:07 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=249599)[0;0m INFO 06-17 04:37:13 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=249599)[0;0m INFO 06-17 04:37:13 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:37:13 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=249599)[0;0m INFO 06-17 04:37:13 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:37:13 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:37:14 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=249599)[0;0m INFO 06-17 04:37:14 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=249599)[0;0m INFO 06-17 04:37:15 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:37:15 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=249599)[0;0m INFO 06-17 04:37:49 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:37:50 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:37:51 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:38:04 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:38:04 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=249599)[0;0m INFO 06-17 04:38:04 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=249599)[0;0m INFO 06-17 04:38:04 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=249599)[0;0m INFO 06-17 04:38:25 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:38:25 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=249599)[0;0m INFO 06-17 04:38:25 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:38:25 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:38:56 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_vi.json
cuda
INFO 06-17 04:39:06 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:39:06 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=251703)[0;0m INFO 06-17 04:39:13 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=251703)[0;0m INFO 06-17 04:39:13 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:39:13 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=251703)[0;0m INFO 06-17 04:39:13 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:39:13 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=251703)[0;0m INFO 06-17 04:39:13 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:39:13 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:39:14 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=251703)[0;0m INFO 06-17 04:39:14 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:39:48 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=251703)[0;0m INFO 06-17 04:39:48 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:39:50 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=251703)[0;0m INFO 06-17 04:40:03 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=251703)[0;0m INFO 06-17 04:40:03 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:40:03 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:40:03 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=251703)[0;0m INFO 06-17 04:40:24 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:40:24 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=251703)[0;0m INFO 06-17 04:40:24 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:40:24 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:40:50 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_th.json
cuda
INFO 06-17 04:41:00 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:41:00 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=253819)[0;0m INFO 06-17 04:41:07 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=253819)[0;0m INFO 06-17 04:41:07 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:41:07 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=253819)[0;0m INFO 06-17 04:41:07 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:41:07 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=253819)[0;0m INFO 06-17 04:41:08 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:41:08 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:41:08 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=253819)[0;0m INFO 06-17 04:41:08 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:41:41 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=253819)[0;0m INFO 06-17 04:41:42 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:41:44 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:41:57 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:41:57 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=253819)[0;0m INFO 06-17 04:41:57 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=253819)[0;0m INFO 06-17 04:41:57 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=253819)[0;0m INFO 06-17 04:42:18 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:42:18 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=253819)[0;0m INFO 06-17 04:42:18 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:42:18 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:42:51 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_tr.json
cuda
INFO 06-17 04:43:01 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:43:01 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=255928)[0;0m INFO 06-17 04:43:07 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=255928)[0;0m INFO 06-17 04:43:07 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:43:07 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=255928)[0;0m INFO 06-17 04:43:07 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:43:07 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=255928)[0;0m INFO 06-17 04:43:08 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:43:08 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:43:08 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=255928)[0;0m INFO 06-17 04:43:09 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:43:42 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=255928)[0;0m INFO 06-17 04:43:43 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:43:44 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=255928)[0;0m INFO 06-17 04:43:57 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=255928)[0;0m INFO 06-17 04:43:57 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:43:57 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:43:57 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=255928)[0;0m INFO 06-17 04:44:18 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:44:18 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=255928)[0;0m INFO 06-17 04:44:18 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:44:18 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:44:44 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_hi.json
cuda
INFO 06-17 04:44:54 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:44:54 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=258029)[0;0m INFO 06-17 04:45:00 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 04:45:01 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=258029)[0;0m INFO 06-17 04:45:01 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=258029)[0;0m INFO 06-17 04:45:01 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:45:01 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=258029)[0;0m INFO 06-17 04:45:01 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:45:01 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:45:01 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=258029)[0;0m INFO 06-17 04:45:02 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:45:36 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=258029)[0;0m INFO 06-17 04:45:36 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:45:38 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=258029)[0;0m INFO 06-17 04:45:51 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=258029)[0;0m INFO 06-17 04:45:51 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:45:51 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:45:51 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=258029)[0;0m INFO 06-17 04:46:12 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:46:12 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=258029)[0;0m INFO 06-17 04:46:12 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:46:12 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:46:51 multiproc_worker_utils.py:123] Killing local vLLM worker processes
