Loading data...
Loading model and tokenizer...
INFO 05-21 14:33:35 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Mistral-7B-v0.1-alpaca_it_gen', speculative_config=None, tokenizer='simonycl/self-seq-Mistral-7B-v0.1-alpaca_it_gen', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 05-21 14:33:39 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1642087)[0m INFO 05-21 14:33:39 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 05-21 14:33:39 selector.py:26] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1642087)[0m INFO 05-21 14:33:40 selector.py:26] Using FlashAttention-2 backend.
INFO 05-21 14:33:41 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1642087)[0m INFO 05-21 14:33:41 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 05-21 14:33:42 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1642087)[0m INFO 05-21 14:33:42 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 05-21 14:33:44 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1642087)[0m INFO 05-21 14:33:44 weight_utils.py:199] Using model weights format ['*.bin']
INFO 05-21 14:34:02 model_runner.py:172] Loading model weights took 6.7544 GB
[36m(RayWorkerWrapper pid=1642087)[0m INFO 05-21 14:34:03 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-21 14:34:04 distributed_gpu_executor.py:45] # GPU blocks: 60255, # CPU blocks: 4096
INFO 05-21 14:34:06 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 05-21 14:34:06 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1642087)[0m INFO 05-21 14:34:06 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1642087)[0m INFO 05-21 14:34:06 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-21 14:34:14 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 05-21 14:34:14 model_runner.py:953] Graph capturing finished in 8 secs.
[36m(RayWorkerWrapper pid=1642087)[0m INFO 05-21 14:34:14 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1642087)[0m INFO 05-21 14:34:14 model_runner.py:953] Graph capturing finished in 8 secs.
Calculating accuracy...
Exact match for en: 0.004
Calculating accuracy...
Exact match for es: 0.024
Calculating accuracy...
Exact match for fr: 0.036
Calculating accuracy...
Exact match for de: 0.02
Calculating accuracy...
Exact match for ru: 0.004
Calculating accuracy...
Exact match for zh: 0.016
Calculating accuracy...
Exact match for ja: 0.012
Calculating accuracy...
Exact match for th: 0.008
Calculating accuracy...
Exact match for sw: 0.008
Calculating accuracy...
Exact match for bn: 0.02
Calculating accuracy...
Exact match for te: 0.008
