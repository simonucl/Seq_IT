Loading data...
Loading model and tokenizer...
INFO 05-16 01:07:24 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='output/self-seq-Mistral-7B-v0.1-flancot_full_sit_llama_70b', speculative_config=None, tokenizer='output/self-seq-Mistral-7B-v0.1-flancot_full_sit_llama_70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 05-16 01:07:27 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=6944)[0m INFO 05-16 01:07:27 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 05-16 01:07:28 selector.py:26] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=6944)[0m INFO 05-16 01:07:28 selector.py:26] Using FlashAttention-2 backend.
INFO 05-16 01:07:30 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=6944)[0m INFO 05-16 01:07:30 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 05-16 01:07:31 utils.py:118] generating GPU P2P access cache for in /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 05-16 01:07:31 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=6944)[0m INFO 05-16 01:07:31 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=6944)[0m INFO 05-16 01:07:54 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-16 01:07:54 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-16 01:07:56 distributed_gpu_executor.py:45] # GPU blocks: 59906, # CPU blocks: 4096
[36m(RayWorkerWrapper pid=6944)[0m INFO 05-16 01:07:57 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=6944)[0m INFO 05-16 01:07:57 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-16 01:07:57 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 05-16 01:07:57 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-16 01:08:04 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=6944)[0m INFO 05-16 01:08:04 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 05-16 01:08:04 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=6944)[0m INFO 05-16 01:08:04 model_runner.py:953] Graph capturing finished in 6 secs.
Calculating accuracy...
Exact match : 0.13949962092494314
Loading data...
Loading model and tokenizer...
INFO 05-16 01:09:34 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='output/self-seq-Mistral-7B-v0.1-flancot_full_sit_llama_70b', speculative_config=None, tokenizer='output/self-seq-Mistral-7B-v0.1-flancot_full_sit_llama_70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 05-16 01:09:37 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=9048)[0m INFO 05-16 01:09:37 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 05-16 01:09:38 selector.py:26] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=9048)[0m INFO 05-16 01:09:38 selector.py:26] Using FlashAttention-2 backend.
INFO 05-16 01:09:40 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=9048)[0m INFO 05-16 01:09:40 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 05-16 01:09:41 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=9048)[0m INFO 05-16 01:09:41 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=9048)[0m INFO 05-16 01:10:03 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-16 01:10:03 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-16 01:10:04 distributed_gpu_executor.py:45] # GPU blocks: 60255, # CPU blocks: 4096
INFO 05-16 01:10:06 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 05-16 01:10:06 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=9048)[0m INFO 05-16 01:10:06 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=9048)[0m INFO 05-16 01:10:06 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-16 01:10:12 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 05-16 01:10:12 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=9048)[0m INFO 05-16 01:10:12 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=9048)[0m INFO 05-16 01:10:12 model_runner.py:953] Graph capturing finished in 6 secs.
Calculating accuracy...
Exact match for en: 0.064
Calculating accuracy...
Exact match for es: 0.012
Calculating accuracy...
Exact match for fr: 0.02
Calculating accuracy...
Exact match for de: 0.02
Calculating accuracy...
Exact match for ru: 0.024
Calculating accuracy...
Exact match for zh: 0.016
Calculating accuracy...
Exact match for ja: 0.02
Calculating accuracy...
Exact match for th: 0.02
Calculating accuracy...
Exact match for sw: 0.016
Calculating accuracy...
Exact match for bn: 0.024
Calculating accuracy...
Exact match for te: 0.012
Loading data...
Loading model and tokenizer...
INFO 05-16 01:22:31 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='output/self-seq-Mistral-7B-v0.1-flancot_full_sit_llama_70b', speculative_config=None, tokenizer='output/self-seq-Mistral-7B-v0.1-flancot_full_sit_llama_70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 05-16 01:22:34 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=11185)[0m INFO 05-16 01:22:34 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 05-16 01:22:34 selector.py:26] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=11185)[0m INFO 05-16 01:22:35 selector.py:26] Using FlashAttention-2 backend.
INFO 05-16 01:22:37 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=11185)[0m INFO 05-16 01:22:37 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 05-16 01:22:38 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=11185)[0m INFO 05-16 01:22:38 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 05-16 01:22:59 model_runner.py:172] Loading model weights took 6.7544 GB
[36m(RayWorkerWrapper pid=11185)[0m INFO 05-16 01:22:59 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-16 01:23:01 distributed_gpu_executor.py:45] # GPU blocks: 60255, # CPU blocks: 4096
INFO 05-16 01:23:03 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 05-16 01:23:03 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=11185)[0m INFO 05-16 01:23:03 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=11185)[0m INFO 05-16 01:23:03 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-16 01:23:10 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=11185)[0m INFO 05-16 01:23:10 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 05-16 01:23:10 model_runner.py:953] Graph capturing finished in 7 secs.
[36m(RayWorkerWrapper pid=11185)[0m INFO 05-16 01:23:10 model_runner.py:953] Graph capturing finished in 7 secs.
Calculating accuracy...
Exact match for en: 0.108
Calculating accuracy...
Exact match for es: 0.064
Calculating accuracy...
Exact match for fr: 0.052
Calculating accuracy...
Exact match for de: 0.072
Calculating accuracy...
Exact match for ru: 0.036
Calculating accuracy...
Exact match for zh: 0.032
Calculating accuracy...
Exact match for ja: 0.032
Calculating accuracy...
Exact match for th: 0.012
Calculating accuracy...
Exact match for sw: 0.024
Calculating accuracy...
Exact match for bn: 0.024
Calculating accuracy...
Exact match for te: 0.028
Number of examples: 164
INFO 05-16 01:32:49 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='output/self-seq-Mistral-7B-v0.1-flancot_full_sit_llama_70b', speculative_config=None, tokenizer='output/self-seq-Mistral-7B-v0.1-flancot_full_sit_llama_70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 05-16 01:32:52 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=13151)[0m INFO 05-16 01:32:52 utils.py:623] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 05-16 01:32:53 selector.py:26] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=13151)[0m INFO 05-16 01:32:53 selector.py:26] Using FlashAttention-2 backend.
INFO 05-16 01:32:54 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=13151)[0m INFO 05-16 01:32:54 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 05-16 01:32:55 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=13151)[0m INFO 05-16 01:32:55 utils.py:132] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 05-16 01:33:15 model_runner.py:172] Loading model weights took 6.7544 GB
[36m(RayWorkerWrapper pid=13151)[0m INFO 05-16 01:33:16 model_runner.py:172] Loading model weights took 6.7544 GB
INFO 05-16 01:33:17 distributed_gpu_executor.py:45] # GPU blocks: 60255, # CPU blocks: 4096
INFO 05-16 01:33:19 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 05-16 01:33:19 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=13151)[0m INFO 05-16 01:33:19 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=13151)[0m INFO 05-16 01:33:19 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-16 01:33:23 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 05-16 01:33:23 model_runner.py:953] Graph capturing finished in 4 secs.
[36m(RayWorkerWrapper pid=13151)[0m INFO 05-16 01:33:23 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=13151)[0m INFO 05-16 01:33:23 model_runner.py:953] Graph capturing finished in 4 secs.
Reading samples...
Running test suites...
Writing results to results/codex_humaneval/{self-seq-self-seq-Mistral-7B-v0.1-flancot_full_sit_llama_70b}_temp_0_8/codex_eval_predictions.jsonl_results.jsonl...
{'pass@10': 0.03648153741599336}
