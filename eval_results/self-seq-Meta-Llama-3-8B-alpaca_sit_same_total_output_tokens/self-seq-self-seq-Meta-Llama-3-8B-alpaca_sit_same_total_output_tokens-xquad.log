1
data/test/xquad_base_en.json
cuda
INFO 06-17 04:04:41 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:04:41 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens)
[1;36m(VllmWorkerProcess pid=217968)[0;0m INFO 06-17 04:04:47 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=217968)[0;0m INFO 06-17 04:04:47 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:04:47 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=217968)[0;0m INFO 06-17 04:04:47 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:04:47 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:04:48 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=217968)[0;0m INFO 06-17 04:04:48 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:04:48 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=217968)[0;0m INFO 06-17 04:04:48 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=217968)[0;0m INFO 06-17 04:05:22 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:05:23 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:05:24 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=217968)[0;0m INFO 06-17 04:05:37 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=217968)[0;0m INFO 06-17 04:05:37 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:05:37 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:05:37 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=217968)[0;0m INFO 06-17 04:05:59 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:05:59 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=217968)[0;0m INFO 06-17 04:05:59 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:05:59 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
1
data/test/xquad_base_de.json
cuda
INFO 06-17 04:06:28 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:06:28 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens)
[1;36m(VllmWorkerProcess pid=220083)[0;0m INFO 06-17 04:06:35 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=220083)[0;0m INFO 06-17 04:06:35 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:06:35 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=220083)[0;0m INFO 06-17 04:06:35 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:06:35 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:06:35 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=220083)[0;0m INFO 06-17 04:06:35 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=220083)[0;0m INFO 06-17 04:06:36 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:06:36 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=220083)[0;0m INFO 06-17 04:07:07 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:07:10 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:07:11 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:07:24 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:07:24 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=220083)[0;0m INFO 06-17 04:07:25 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=220083)[0;0m INFO 06-17 04:07:25 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=220083)[0;0m INFO 06-17 04:07:46 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:07:46 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=220083)[0;0m INFO 06-17 04:07:46 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:07:46 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 04:08:36 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_es.json
cuda
INFO 06-17 04:08:47 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:08:47 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens)
[1;36m(VllmWorkerProcess pid=222184)[0;0m INFO 06-17 04:08:53 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 04:08:53 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=222184)[0;0m INFO 06-17 04:08:53 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=222184)[0;0m INFO 06-17 04:08:53 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:08:53 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:08:54 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=222184)[0;0m INFO 06-17 04:08:54 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:08:54 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=222184)[0;0m INFO 06-17 04:08:54 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:09:27 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=222184)[0;0m INFO 06-17 04:09:28 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:09:29 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:09:42 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:09:42 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=222184)[0;0m INFO 06-17 04:09:42 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=222184)[0;0m INFO 06-17 04:09:42 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=222184)[0;0m INFO 06-17 04:10:04 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:10:04 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=222184)[0;0m INFO 06-17 04:10:04 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:10:04 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 04:11:00 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_ru.json
cuda
INFO 06-17 04:11:10 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:11:10 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens)
[1;36m(VllmWorkerProcess pid=224312)[0;0m INFO 06-17 04:11:16 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=224312)[0;0m INFO 06-17 04:11:16 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:11:16 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=224312)[0;0m INFO 06-17 04:11:16 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:11:16 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=224312)[0;0m INFO 06-17 04:11:17 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:11:17 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:11:17 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=224312)[0;0m INFO 06-17 04:11:18 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:11:50 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=224312)[0;0m INFO 06-17 04:11:51 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:11:52 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=224312)[0;0m INFO 06-17 04:12:05 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=224312)[0;0m INFO 06-17 04:12:05 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:12:06 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:12:06 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=224312)[0;0m INFO 06-17 04:12:27 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:12:27 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=224312)[0;0m INFO 06-17 04:12:27 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:12:27 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:13:24 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_zh.json
cuda
INFO 06-17 04:13:34 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:13:34 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens)
[1;36m(VllmWorkerProcess pid=226414)[0;0m INFO 06-17 04:13:40 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=226414)[0;0m INFO 06-17 04:13:41 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:13:41 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=226414)[0;0m INFO 06-17 04:13:41 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:13:41 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:13:41 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=226414)[0;0m INFO 06-17 04:13:41 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:13:41 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=226414)[0;0m INFO 06-17 04:13:42 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:14:15 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=226414)[0;0m INFO 06-17 04:14:15 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:14:16 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=226414)[0;0m INFO 06-17 04:14:29 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=226414)[0;0m INFO 06-17 04:14:29 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:14:29 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:14:29 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=226414)[0;0m INFO 06-17 04:14:51 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:14:51 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=226414)[0;0m INFO 06-17 04:14:51 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:14:51 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 04:15:39 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_ar.json
cuda
INFO 06-17 04:15:48 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:15:48 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens)
[1;36m(VllmWorkerProcess pid=228517)[0;0m INFO 06-17 04:15:55 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 04:15:55 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=228517)[0;0m INFO 06-17 04:15:55 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=228517)[0;0m INFO 06-17 04:15:55 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:15:55 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:15:55 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=228517)[0;0m INFO 06-17 04:15:55 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:15:56 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=228517)[0;0m INFO 06-17 04:15:56 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:16:28 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=228517)[0;0m INFO 06-17 04:16:29 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:16:31 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:16:44 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:16:44 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=228517)[0;0m INFO 06-17 04:16:44 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=228517)[0;0m INFO 06-17 04:16:44 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=228517)[0;0m INFO 06-17 04:17:06 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:17:06 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=228517)[0;0m INFO 06-17 04:17:06 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:17:06 model_runner.py:965] Graph capturing finished in 23 secs.
Using 2 GPU devices
INFO 06-17 04:18:02 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_vi.json
cuda
INFO 06-17 04:18:12 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:18:12 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens)
[1;36m(VllmWorkerProcess pid=230615)[0;0m INFO 06-17 04:18:18 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=230615)[0;0m INFO 06-17 04:18:19 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:18:19 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=230615)[0;0m INFO 06-17 04:18:19 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:18:19 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:18:19 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=230615)[0;0m INFO 06-17 04:18:19 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:18:20 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=230615)[0;0m INFO 06-17 04:18:20 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:18:54 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=230615)[0;0m INFO 06-17 04:18:54 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:18:55 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:19:08 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:19:08 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=230615)[0;0m INFO 06-17 04:19:08 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=230615)[0;0m INFO 06-17 04:19:08 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=230615)[0;0m INFO 06-17 04:19:29 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:19:29 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=230615)[0;0m INFO 06-17 04:19:29 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:19:29 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:20:16 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_th.json
cuda
INFO 06-17 04:20:27 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:20:27 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens)
[1;36m(VllmWorkerProcess pid=232732)[0;0m INFO 06-17 04:20:33 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=232732)[0;0m INFO 06-17 04:20:33 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:20:33 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=232732)[0;0m INFO 06-17 04:20:33 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:20:33 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:20:34 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=232732)[0;0m INFO 06-17 04:20:34 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=232732)[0;0m INFO 06-17 04:20:34 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:20:34 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:21:09 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=232732)[0;0m INFO 06-17 04:21:09 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:21:10 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=232732)[0;0m INFO 06-17 04:21:23 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=232732)[0;0m INFO 06-17 04:21:23 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:21:23 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:21:23 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=232732)[0;0m INFO 06-17 04:21:45 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:21:45 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=232732)[0;0m INFO 06-17 04:21:45 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:21:45 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:22:45 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_tr.json
cuda
INFO 06-17 04:22:55 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:22:55 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens)
[1;36m(VllmWorkerProcess pid=234838)[0;0m INFO 06-17 04:23:01 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=234838)[0;0m INFO 06-17 04:23:01 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 04:23:01 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=234838)[0;0m INFO 06-17 04:23:01 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:23:01 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=234838)[0;0m INFO 06-17 04:23:02 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:23:02 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:23:02 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=234838)[0;0m INFO 06-17 04:23:02 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:23:36 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=234838)[0;0m INFO 06-17 04:23:36 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:23:37 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 04:23:50 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:23:50 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=234838)[0;0m INFO 06-17 04:23:50 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=234838)[0;0m INFO 06-17 04:23:50 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=234838)[0;0m INFO 06-17 04:24:11 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:24:11 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=234838)[0;0m INFO 06-17 04:24:11 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 04:24:11 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 04:24:59 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_hi.json
cuda
INFO 06-17 04:25:09 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 04:25:09 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-alpaca_sit_same_total_output_tokens)
[1;36m(VllmWorkerProcess pid=236943)[0;0m INFO 06-17 04:25:16 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 04:25:16 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=236943)[0;0m INFO 06-17 04:25:16 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=236943)[0;0m INFO 06-17 04:25:16 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 04:25:16 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=236943)[0;0m INFO 06-17 04:25:16 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:25:16 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 04:25:17 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=236943)[0;0m INFO 06-17 04:25:17 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 04:25:52 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=236943)[0;0m INFO 06-17 04:25:52 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 04:25:53 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=236943)[0;0m INFO 06-17 04:26:06 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=236943)[0;0m INFO 06-17 04:26:06 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 04:26:06 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 04:26:06 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=236943)[0;0m INFO 06-17 04:26:28 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 04:26:28 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=236943)[0;0m INFO 06-17 04:26:28 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 04:26:28 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 04:27:22 multiproc_worker_utils.py:123] Killing local vLLM worker processes
