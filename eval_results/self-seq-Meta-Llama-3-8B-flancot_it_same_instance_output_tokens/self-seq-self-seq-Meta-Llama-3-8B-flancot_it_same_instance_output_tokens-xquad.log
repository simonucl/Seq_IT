1
data/test/xquad_base_en.json
cuda
INFO 06-17 05:54:29 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:54:29 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=323377)[0;0m INFO 06-17 05:54:36 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=323377)[0;0m INFO 06-17 05:54:36 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 05:54:36 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=323377)[0;0m INFO 06-17 05:54:36 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:54:36 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=323377)[0;0m INFO 06-17 05:54:36 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:54:36 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:54:37 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=323377)[0;0m INFO 06-17 05:54:37 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=323377)[0;0m INFO 06-17 05:55:12 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:55:12 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:55:13 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=323377)[0;0m INFO 06-17 05:55:27 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=323377)[0;0m INFO 06-17 05:55:27 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 05:55:27 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:55:27 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=323377)[0;0m INFO 06-17 05:55:48 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:55:48 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=323377)[0;0m INFO 06-17 05:55:48 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 05:55:48 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 05:56:14 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_de.json
cuda
INFO 06-17 05:56:25 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:56:25 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=325497)[0;0m INFO 06-17 05:56:31 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 05:56:32 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=325497)[0;0m INFO 06-17 05:56:32 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=325497)[0;0m INFO 06-17 05:56:32 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:56:32 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:56:32 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=325497)[0;0m INFO 06-17 05:56:32 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 05:56:32 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=325497)[0;0m INFO 06-17 05:56:33 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:57:07 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=325497)[0;0m INFO 06-17 05:57:07 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:57:08 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=325497)[0;0m INFO 06-17 05:57:21 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=325497)[0;0m INFO 06-17 05:57:21 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 05:57:21 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:57:21 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=325497)[0;0m INFO 06-17 05:57:42 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 05:57:42 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=325497)[0;0m INFO 06-17 05:57:42 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 05:57:42 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 05:58:33 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_es.json
cuda
INFO 06-17 05:58:43 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 05:58:43 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=327603)[0;0m INFO 06-17 05:58:50 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 05:58:50 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=327603)[0;0m INFO 06-17 05:58:50 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=327603)[0;0m INFO 06-17 05:58:50 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:58:50 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 05:58:51 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=327603)[0;0m INFO 06-17 05:58:51 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=327603)[0;0m INFO 06-17 05:58:51 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 05:58:51 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=327603)[0;0m INFO 06-17 05:59:25 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:59:26 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 05:59:27 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=327603)[0;0m INFO 06-17 05:59:40 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=327603)[0;0m INFO 06-17 05:59:40 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 05:59:40 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 05:59:40 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=327603)[0;0m INFO 06-17 06:00:01 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 06:00:01 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=327603)[0;0m INFO 06-17 06:00:01 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 06:00:01 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 06:00:49 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_ru.json
cuda
INFO 06-17 06:01:00 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 06:01:00 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=329702)[0;0m INFO 06-17 06:01:07 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=329702)[0;0m INFO 06-17 06:01:07 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 06:01:07 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=329702)[0;0m INFO 06-17 06:01:07 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:01:07 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=329702)[0;0m INFO 06-17 06:01:08 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 06:01:08 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 06:01:08 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=329702)[0;0m INFO 06-17 06:01:08 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=329702)[0;0m INFO 06-17 06:01:43 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 06:01:43 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 06:01:44 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=329702)[0;0m INFO 06-17 06:01:57 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=329702)[0;0m INFO 06-17 06:01:57 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 06:01:57 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 06:01:57 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=329702)[0;0m INFO 06-17 06:02:19 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 06:02:19 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=329702)[0;0m INFO 06-17 06:02:19 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 06:02:19 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 06:03:20 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_base_zh.json
cuda
INFO 06-17 06:03:30 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 06:03:30 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=331804)[0;0m INFO 06-17 06:03:37 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=331804)[0;0m INFO 06-17 06:03:37 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 06:03:37 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=331804)[0;0m INFO 06-17 06:03:37 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:03:37 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:03:38 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=331804)[0;0m INFO 06-17 06:03:38 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 06:03:38 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=331804)[0;0m INFO 06-17 06:03:38 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 06:04:11 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=331804)[0;0m INFO 06-17 06:04:13 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 06:04:14 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 06:04:27 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 06:04:27 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=331804)[0;0m INFO 06-17 06:04:27 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=331804)[0;0m INFO 06-17 06:04:27 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=331804)[0;0m INFO 06-17 06:04:49 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 06:04:49 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=331804)[0;0m INFO 06-17 06:04:49 model_runner.py:965] Graph capturing finished in 21 secs.
INFO 06-17 06:04:49 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 06:05:38 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_ar.json
cuda
INFO 06-17 06:05:48 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 06:05:48 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=333914)[0;0m INFO 06-17 06:05:55 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 06:05:55 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=333914)[0;0m INFO 06-17 06:05:55 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=333914)[0;0m INFO 06-17 06:05:55 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:05:55 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:05:56 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=333914)[0;0m INFO 06-17 06:05:56 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=333914)[0;0m INFO 06-17 06:05:56 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 06:05:56 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=333914)[0;0m INFO 06-17 06:06:32 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 06:06:32 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 06:06:33 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 06:06:46 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 06:06:46 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=333914)[0;0m INFO 06-17 06:06:46 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=333914)[0;0m INFO 06-17 06:06:46 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=333914)[0;0m INFO 06-17 06:07:08 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 06:07:08 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=333914)[0;0m INFO 06-17 06:07:08 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 06:07:08 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 06:08:13 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_vi.json
cuda
INFO 06-17 06:08:23 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 06:08:23 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=336016)[0;0m INFO 06-17 06:08:30 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=336016)[0;0m INFO 06-17 06:08:30 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 06:08:30 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=336016)[0;0m INFO 06-17 06:08:30 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:08:30 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:08:31 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=336016)[0;0m INFO 06-17 06:08:31 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 06:08:31 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=336016)[0;0m INFO 06-17 06:08:31 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 06:09:05 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=336016)[0;0m INFO 06-17 06:09:06 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 06:09:07 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 06:09:20 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 06:09:20 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=336016)[0;0m INFO 06-17 06:09:20 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=336016)[0;0m INFO 06-17 06:09:20 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=336016)[0;0m INFO 06-17 06:09:41 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 06:09:41 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=336016)[0;0m INFO 06-17 06:09:41 model_runner.py:965] Graph capturing finished in 20 secs.
INFO 06-17 06:09:41 model_runner.py:965] Graph capturing finished in 21 secs.
Using 2 GPU devices
INFO 06-17 06:10:33 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_th.json
cuda
INFO 06-17 06:10:43 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 06:10:43 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=338134)[0;0m INFO 06-17 06:10:50 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
INFO 06-17 06:10:50 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=338134)[0;0m INFO 06-17 06:10:50 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=338134)[0;0m INFO 06-17 06:10:50 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:10:50 pynccl.py:63] vLLM is using nccl==2.20.5
[1;36m(VllmWorkerProcess pid=338134)[0;0m INFO 06-17 06:10:51 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 06:10:51 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 06:10:51 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=338134)[0;0m INFO 06-17 06:10:51 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 06:11:24 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=338134)[0;0m INFO 06-17 06:11:25 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 06:11:27 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 06:11:40 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 06:11:40 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=338134)[0;0m INFO 06-17 06:11:40 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=338134)[0;0m INFO 06-17 06:11:40 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=338134)[0;0m INFO 06-17 06:12:02 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 06:12:02 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=338134)[0;0m INFO 06-17 06:12:02 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 06:12:02 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 06:13:14 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_tr.json
cuda
INFO 06-17 06:13:24 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 06:13:24 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=340241)[0;0m INFO 06-17 06:13:31 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=340241)[0;0m INFO 06-17 06:13:31 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 06:13:31 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=340241)[0;0m INFO 06-17 06:13:31 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:13:31 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:13:32 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=340241)[0;0m INFO 06-17 06:13:32 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 06:13:32 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=340241)[0;0m INFO 06-17 06:13:32 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=340241)[0;0m INFO 06-17 06:14:08 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 06:14:08 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 06:14:10 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
[1;36m(VllmWorkerProcess pid=340241)[0;0m INFO 06-17 06:14:23 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=340241)[0;0m INFO 06-17 06:14:23 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-17 06:14:23 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 06:14:23 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=340241)[0;0m INFO 06-17 06:14:45 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 06:14:45 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=340241)[0;0m INFO 06-17 06:14:45 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 06:14:45 model_runner.py:965] Graph capturing finished in 22 secs.
Using 2 GPU devices
INFO 06-17 06:15:44 multiproc_worker_utils.py:123] Killing local vLLM worker processes
1
data/test/xquad_trans_hi.json
cuda
INFO 06-17 06:15:56 config.py:623] Defaulting to use mp for distributed inference
INFO 06-17 06:15:56 llm_engine.py:161] Initializing an LLM engine (v0.5.0.post1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0, served_model_name=simonycl/self-seq-Meta-Llama-3-8B-flancot_it_same_instance_output_tokens)
[1;36m(VllmWorkerProcess pid=342342)[0;0m INFO 06-17 06:16:02 multiproc_worker_utils.py:215] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=342342)[0;0m INFO 06-17 06:16:02 utils.py:645] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=342342)[0;0m INFO 06-17 06:16:02 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:16:02 utils.py:645] Found nccl from library libnccl.so.2
INFO 06-17 06:16:02 pynccl.py:63] vLLM is using nccl==2.20.5
INFO 06-17 06:16:03 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[1;36m(VllmWorkerProcess pid=342342)[0;0m INFO 06-17 06:16:03 custom_all_reduce_utils.py:202] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-17 06:16:03 weight_utils.py:218] Using model weights format ['*.bin']
[1;36m(VllmWorkerProcess pid=342342)[0;0m INFO 06-17 06:16:03 weight_utils.py:218] Using model weights format ['*.bin']
INFO 06-17 06:16:38 model_runner.py:160] Loading model weights took 7.4829 GB
[1;36m(VllmWorkerProcess pid=342342)[0;0m INFO 06-17 06:16:38 model_runner.py:160] Loading model weights took 7.4829 GB
INFO 06-17 06:16:40 distributed_gpu_executor.py:56] # GPU blocks: 67837, # CPU blocks: 4096
INFO 06-17 06:16:52 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-17 06:16:52 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=342342)[0;0m INFO 06-17 06:16:53 model_runner.py:889] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[1;36m(VllmWorkerProcess pid=342342)[0;0m INFO 06-17 06:16:53 model_runner.py:893] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=342342)[0;0m INFO 06-17 06:17:15 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
INFO 06-17 06:17:15 custom_all_reduce.py:267] Registering 2275 cuda graph addresses
[1;36m(VllmWorkerProcess pid=342342)[0;0m INFO 06-17 06:17:15 model_runner.py:965] Graph capturing finished in 22 secs.
INFO 06-17 06:17:15 model_runner.py:965] Graph capturing finished in 23 secs.
Using 2 GPU devices
INFO 06-17 06:18:22 multiproc_worker_utils.py:123] Killing local vLLM worker processes
