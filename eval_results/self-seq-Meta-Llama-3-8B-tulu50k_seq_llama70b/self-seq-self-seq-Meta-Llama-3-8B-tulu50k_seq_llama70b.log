Loading data...
Loading model and tokenizer...
INFO 06-12 21:25:12 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 21:25:17 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=84598)[0m INFO 06-12 21:25:17 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 21:25:17 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=84598)[0m INFO 06-12 21:25:18 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 21:25:20 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=84598)[0m INFO 06-12 21:25:20 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 21:25:22 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=84598)[0m INFO 06-12 21:25:22 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 21:25:24 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=84598)[0m INFO 06-12 21:25:24 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 21:27:44 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=84598)[0m INFO 06-12 21:27:45 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 21:27:48 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 21:27:51 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 21:27:51 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=84598)[0m INFO 06-12 21:27:51 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=84598)[0m INFO 06-12 21:27:51 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 21:28:07 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 21:28:07 model_runner.py:953] Graph capturing finished in 17 secs.
[36m(RayWorkerWrapper pid=84598)[0m INFO 06-12 21:28:07 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=84598)[0m INFO 06-12 21:28:07 model_runner.py:953] Graph capturing finished in 17 secs.
Calculating accuracy...
Exact match : 0.44579226686884005
Loading data...
Loading model and tokenizer...
INFO 06-12 21:29:49 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 21:29:53 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=86731)[0m INFO 06-12 21:29:53 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 21:29:54 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=86731)[0m INFO 06-12 21:29:54 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 21:29:57 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=86731)[0m INFO 06-12 21:29:57 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 21:29:58 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=86731)[0m INFO 06-12 21:29:58 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 21:30:00 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=86731)[0m INFO 06-12 21:30:01 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 21:30:21 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=86731)[0m INFO 06-12 21:30:21 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 21:30:23 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 21:30:26 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 21:30:26 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=86731)[0m INFO 06-12 21:30:26 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=86731)[0m INFO 06-12 21:30:26 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 21:30:43 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 21:30:43 model_runner.py:953] Graph capturing finished in 17 secs.
[36m(RayWorkerWrapper pid=86731)[0m INFO 06-12 21:30:43 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=86731)[0m INFO 06-12 21:30:43 model_runner.py:953] Graph capturing finished in 17 secs.
Calculating accuracy...
Exact match for en: 0.42
Calculating accuracy...
Exact match for es: 0.372
Calculating accuracy...
Exact match for fr: 0.34
Calculating accuracy...
Exact match for de: 0.328
Calculating accuracy...
Exact match for ru: 0.28
Calculating accuracy...
Exact match for zh: 0.296
Calculating accuracy...
Exact match for ja: 0.232
Calculating accuracy...
Exact match for th: 0.26
Calculating accuracy...
Exact match for sw: 0.116
Calculating accuracy...
Exact match for bn: 0.144
Calculating accuracy...
Exact match for te: 0.084
Loading data...
Loading model and tokenizer...
INFO 06-12 21:36:28 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 21:36:32 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=88890)[0m INFO 06-12 21:36:32 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 21:36:32 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=88890)[0m INFO 06-12 21:36:33 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 21:36:35 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=88890)[0m INFO 06-12 21:36:35 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 21:36:36 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=88890)[0m INFO 06-12 21:36:36 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 21:36:37 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=88890)[0m INFO 06-12 21:36:37 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 21:36:57 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=88890)[0m INFO 06-12 21:36:58 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 21:36:59 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 21:37:01 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 21:37:01 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=88890)[0m INFO 06-12 21:37:01 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=88890)[0m INFO 06-12 21:37:01 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 21:37:12 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 21:37:12 model_runner.py:953] Graph capturing finished in 11 secs.
[36m(RayWorkerWrapper pid=88890)[0m INFO 06-12 21:37:12 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=88890)[0m INFO 06-12 21:37:12 model_runner.py:953] Graph capturing finished in 11 secs.
Calculating accuracy...
Exact match for en: 0.44
Calculating accuracy...
Exact match for es: 0.42
Calculating accuracy...
Exact match for fr: 0.372
Calculating accuracy...
Exact match for de: 0.424
Calculating accuracy...
Exact match for ru: 0.436
Calculating accuracy...
Exact match for zh: 0.384
Calculating accuracy...
Exact match for ja: 0.332
Calculating accuracy...
Exact match for th: 0.308
Calculating accuracy...
Exact match for sw: 0.204
Calculating accuracy...
Exact match for bn: 0.236
Calculating accuracy...
Exact match for te: 0.116
Number of examples: 164
INFO 06-12 21:44:39 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 21:44:44 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=90878)[0m INFO 06-12 21:44:44 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 21:44:45 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=90878)[0m INFO 06-12 21:44:45 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 21:44:45 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=90878)[0m INFO 06-12 21:44:45 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 21:44:46 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=90878)[0m INFO 06-12 21:44:46 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 21:44:47 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=90878)[0m INFO 06-12 21:44:48 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 21:45:08 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=90878)[0m INFO 06-12 21:45:08 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 21:45:10 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 21:45:11 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 21:45:11 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=90878)[0m INFO 06-12 21:45:11 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=90878)[0m INFO 06-12 21:45:11 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 21:45:16 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 21:45:16 model_runner.py:953] Graph capturing finished in 5 secs.
[36m(RayWorkerWrapper pid=90878)[0m INFO 06-12 21:45:16 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=90878)[0m INFO 06-12 21:45:16 model_runner.py:953] Graph capturing finished in 5 secs.
Reading samples...
Running test suites...
Writing results to results/codex_humaneval/{self-seq-self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b}_temp_0_8/codex_eval_predictions.jsonl_results.jsonl...
{'pass@10': 0.5797339034898501}
/root/.cache/huggingface/datasets/downloads/07bde58ae497102ab81d326d84eafcf6c2c7e8df8cd8b8d0ef64d9eceab41ada
INFO 06-12 21:51:55 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 21:51:59 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=604711)[0m INFO 06-12 21:51:59 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 21:52:00 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=604711)[0m INFO 06-12 21:52:00 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 21:52:02 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=604711)[0m INFO 06-12 21:52:02 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 21:52:03 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=604711)[0m INFO 06-12 21:52:03 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 21:52:04 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=604711)[0m INFO 06-12 21:52:04 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 21:52:24 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=604711)[0m INFO 06-12 21:52:25 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 21:52:26 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 21:52:28 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 21:52:28 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=604711)[0m INFO 06-12 21:52:28 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=604711)[0m INFO 06-12 21:52:28 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 21:52:35 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 21:52:35 model_runner.py:953] Graph capturing finished in 7 secs.
[36m(RayWorkerWrapper pid=604711)[0m INFO 06-12 21:52:35 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=604711)[0m INFO 06-12 21:52:35 model_runner.py:953] Graph capturing finished in 7 secs.
