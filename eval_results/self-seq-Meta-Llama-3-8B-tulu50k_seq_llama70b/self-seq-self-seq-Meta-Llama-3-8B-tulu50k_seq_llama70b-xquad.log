1
data/test/xquad_base_en.json
cuda
INFO 06-12 22:10:18 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:10:22 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=614526)[0m INFO 06-12 22:10:22 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:10:22 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=614526)[0m INFO 06-12 22:10:23 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:10:23 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=614526)[0m INFO 06-12 22:10:23 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:10:25 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=614526)[0m INFO 06-12 22:10:25 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:10:25 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=614526)[0m INFO 06-12 22:10:25 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:10:46 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=614526)[0m INFO 06-12 22:10:46 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:10:47 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 22:10:49 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:10:49 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=614526)[0m INFO 06-12 22:10:49 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=614526)[0m INFO 06-12 22:10:49 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:10:55 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:10:55 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=614526)[0m INFO 06-12 22:10:55 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=614526)[0m INFO 06-12 22:10:55 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_base_de.json
cuda
INFO 06-12 22:11:22 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:11:26 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=616487)[0m INFO 06-12 22:11:26 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:11:26 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=616487)[0m INFO 06-12 22:11:27 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:11:28 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=616487)[0m INFO 06-12 22:11:28 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:11:29 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=616487)[0m INFO 06-12 22:11:29 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=616487)[0m INFO 06-12 22:11:30 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:11:30 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:11:50 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=616487)[0m INFO 06-12 22:11:50 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:11:51 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 22:11:53 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:11:53 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=616487)[0m INFO 06-12 22:11:53 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=616487)[0m INFO 06-12 22:11:53 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:11:59 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:11:59 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=616487)[0m INFO 06-12 22:11:59 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=616487)[0m INFO 06-12 22:11:59 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_base_es.json
cuda
INFO 06-12 22:12:36 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:12:41 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=618448)[0m INFO 06-12 22:12:41 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:12:41 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=618448)[0m INFO 06-12 22:12:42 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:12:43 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=618448)[0m INFO 06-12 22:12:43 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:12:44 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=618448)[0m INFO 06-12 22:12:44 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:12:45 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=618448)[0m INFO 06-12 22:12:45 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:13:05 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=618448)[0m INFO 06-12 22:13:06 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:13:08 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 22:13:09 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:13:09 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=618448)[0m INFO 06-12 22:13:09 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=618448)[0m INFO 06-12 22:13:09 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:13:15 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:13:15 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=618448)[0m INFO 06-12 22:13:15 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=618448)[0m INFO 06-12 22:13:15 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_base_ru.json
cuda
INFO 06-12 22:13:51 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:13:56 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=620410)[0m INFO 06-12 22:13:56 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:13:56 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=620410)[0m INFO 06-12 22:13:57 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:13:57 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=620410)[0m INFO 06-12 22:13:57 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:13:58 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=620410)[0m INFO 06-12 22:13:58 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:13:59 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=620410)[0m INFO 06-12 22:14:00 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:14:20 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=620410)[0m INFO 06-12 22:14:20 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:14:21 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 22:14:23 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:14:23 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=620410)[0m INFO 06-12 22:14:23 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=620410)[0m INFO 06-12 22:14:23 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:14:30 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:14:30 model_runner.py:953] Graph capturing finished in 7 secs.
[36m(RayWorkerWrapper pid=620410)[0m INFO 06-12 22:14:30 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=620410)[0m INFO 06-12 22:14:30 model_runner.py:953] Graph capturing finished in 7 secs.
Using 2 GPU devices
1
data/test/xquad_base_zh.json
cuda
INFO 06-12 22:15:08 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:15:13 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=622367)[0m INFO 06-12 22:15:13 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:15:13 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=622367)[0m INFO 06-12 22:15:14 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:15:15 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=622367)[0m INFO 06-12 22:15:15 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:15:17 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=622367)[0m INFO 06-12 22:15:17 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:15:17 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=622367)[0m INFO 06-12 22:15:18 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:15:38 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=622367)[0m INFO 06-12 22:15:38 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:15:39 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 22:15:41 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:15:41 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=622367)[0m INFO 06-12 22:15:41 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=622367)[0m INFO 06-12 22:15:41 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:15:47 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:15:47 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=622367)[0m INFO 06-12 22:15:47 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=622367)[0m INFO 06-12 22:15:47 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_trans_ar.json
cuda
INFO 06-12 22:16:24 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:16:28 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=624322)[0m INFO 06-12 22:16:28 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:16:28 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=624322)[0m INFO 06-12 22:16:29 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:16:30 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=624322)[0m INFO 06-12 22:16:30 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:16:31 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=624322)[0m INFO 06-12 22:16:31 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:16:32 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=624322)[0m INFO 06-12 22:16:32 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:16:52 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=624322)[0m INFO 06-12 22:16:53 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:16:54 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 22:16:56 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:16:56 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=624322)[0m INFO 06-12 22:16:56 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=624322)[0m INFO 06-12 22:16:56 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:17:02 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:17:02 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=624322)[0m INFO 06-12 22:17:02 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=624322)[0m INFO 06-12 22:17:02 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_trans_vi.json
cuda
INFO 06-12 22:17:39 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:17:43 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=626279)[0m INFO 06-12 22:17:43 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:17:44 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=626279)[0m INFO 06-12 22:17:45 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:17:45 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=626279)[0m INFO 06-12 22:17:45 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:17:46 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=626279)[0m INFO 06-12 22:17:46 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:17:47 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=626279)[0m INFO 06-12 22:17:47 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:18:07 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=626279)[0m INFO 06-12 22:18:08 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:18:09 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 22:18:10 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:18:10 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=626279)[0m INFO 06-12 22:18:10 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=626279)[0m INFO 06-12 22:18:10 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:18:16 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:18:16 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=626279)[0m INFO 06-12 22:18:16 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=626279)[0m INFO 06-12 22:18:16 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_trans_th.json
cuda
INFO 06-12 22:18:53 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:18:58 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=628237)[0m INFO 06-12 22:18:58 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:18:58 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=628237)[0m INFO 06-12 22:18:59 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:18:59 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=628237)[0m INFO 06-12 22:18:59 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:19:00 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=628237)[0m INFO 06-12 22:19:00 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:19:01 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=628237)[0m INFO 06-12 22:19:02 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:19:22 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=628237)[0m INFO 06-12 22:19:22 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:19:24 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 22:19:25 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:19:25 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=628237)[0m INFO 06-12 22:19:25 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=628237)[0m INFO 06-12 22:19:25 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:19:32 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:19:32 model_runner.py:953] Graph capturing finished in 7 secs.
[36m(RayWorkerWrapper pid=628237)[0m INFO 06-12 22:19:32 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=628237)[0m INFO 06-12 22:19:32 model_runner.py:953] Graph capturing finished in 7 secs.
Using 2 GPU devices
1
data/test/xquad_trans_tr.json
cuda
INFO 06-12 22:20:17 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:20:22 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=630207)[0m INFO 06-12 22:20:22 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:20:22 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=630207)[0m INFO 06-12 22:20:23 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:20:23 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=630207)[0m INFO 06-12 22:20:23 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:20:24 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=630207)[0m INFO 06-12 22:20:24 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:20:25 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=630207)[0m INFO 06-12 22:20:25 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:20:46 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=630207)[0m INFO 06-12 22:20:47 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:20:48 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 22:20:50 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:20:50 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=630207)[0m INFO 06-12 22:20:50 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=630207)[0m INFO 06-12 22:20:50 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:20:56 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:20:56 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=630207)[0m INFO 06-12 22:20:56 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=630207)[0m INFO 06-12 22:20:56 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_trans_hi.json
cuda
INFO 06-12 22:21:34 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_seq_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:21:39 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=632179)[0m INFO 06-12 22:21:39 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:21:39 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=632179)[0m INFO 06-12 22:21:40 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:21:40 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=632179)[0m INFO 06-12 22:21:40 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:21:41 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=632179)[0m INFO 06-12 22:21:41 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:21:42 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=632179)[0m INFO 06-12 22:21:43 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:22:03 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=632179)[0m INFO 06-12 22:22:04 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:22:05 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 22:22:06 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:22:06 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=632179)[0m INFO 06-12 22:22:06 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=632179)[0m INFO 06-12 22:22:06 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:22:13 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:22:13 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=632179)[0m INFO 06-12 22:22:13 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=632179)[0m INFO 06-12 22:22:13 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
