1
data/test/xquad_base_en.json
cuda
INFO 06-12 23:10:06 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:10:10 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1167240)[0m INFO 06-12 23:10:10 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:10:10 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1167240)[0m INFO 06-12 23:10:11 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:10:11 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1167240)[0m INFO 06-12 23:10:11 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:10:13 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1167240)[0m INFO 06-12 23:10:13 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:10:14 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1167240)[0m INFO 06-12 23:10:14 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:10:34 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1167240)[0m INFO 06-12 23:10:35 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:10:36 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 23:10:38 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:10:38 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1167240)[0m INFO 06-12 23:10:38 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1167240)[0m INFO 06-12 23:10:38 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:10:44 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:10:44 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1167240)[0m INFO 06-12 23:10:44 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1167240)[0m INFO 06-12 23:10:44 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_base_de.json
cuda
INFO 06-12 23:11:12 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:11:16 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1169214)[0m INFO 06-12 23:11:16 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:11:16 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1169214)[0m INFO 06-12 23:11:17 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:11:18 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1169214)[0m INFO 06-12 23:11:18 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:11:19 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1169214)[0m INFO 06-12 23:11:19 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:11:20 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1169214)[0m INFO 06-12 23:11:20 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:11:40 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1169214)[0m INFO 06-12 23:11:41 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:11:42 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 23:11:44 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:11:44 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1169214)[0m INFO 06-12 23:11:44 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1169214)[0m INFO 06-12 23:11:44 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:11:50 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:11:50 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1169214)[0m INFO 06-12 23:11:50 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1169214)[0m INFO 06-12 23:11:50 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_base_es.json
cuda
INFO 06-12 23:12:30 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:12:34 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1171177)[0m INFO 06-12 23:12:34 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:12:35 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1171177)[0m INFO 06-12 23:12:36 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:12:36 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1171177)[0m INFO 06-12 23:12:36 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:12:37 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1171177)[0m INFO 06-12 23:12:37 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:12:38 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1171177)[0m INFO 06-12 23:12:38 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:12:58 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1171177)[0m INFO 06-12 23:12:58 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:13:00 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 23:13:01 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:13:01 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1171177)[0m INFO 06-12 23:13:01 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1171177)[0m INFO 06-12 23:13:01 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:13:07 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:13:07 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1171177)[0m INFO 06-12 23:13:07 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1171177)[0m INFO 06-12 23:13:07 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_base_ru.json
cuda
INFO 06-12 23:13:43 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:13:48 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1173137)[0m INFO 06-12 23:13:48 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:13:48 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1173137)[0m INFO 06-12 23:13:49 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:13:50 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1173137)[0m INFO 06-12 23:13:50 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:13:51 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1173137)[0m INFO 06-12 23:13:51 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:13:52 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1173137)[0m INFO 06-12 23:13:52 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:14:13 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1173137)[0m INFO 06-12 23:14:13 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:14:14 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 23:14:16 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:14:16 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1173137)[0m INFO 06-12 23:14:16 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1173137)[0m INFO 06-12 23:14:16 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:14:23 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:14:23 model_runner.py:953] Graph capturing finished in 7 secs.
[36m(RayWorkerWrapper pid=1173137)[0m INFO 06-12 23:14:23 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1173137)[0m INFO 06-12 23:14:23 model_runner.py:953] Graph capturing finished in 7 secs.
Using 2 GPU devices
1
data/test/xquad_base_zh.json
cuda
INFO 06-12 23:15:00 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:15:05 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1175094)[0m INFO 06-12 23:15:05 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:15:05 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1175094)[0m INFO 06-12 23:15:06 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:15:06 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1175094)[0m INFO 06-12 23:15:06 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:15:08 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1175094)[0m INFO 06-12 23:15:08 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:15:09 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1175094)[0m INFO 06-12 23:15:09 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:15:29 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1175094)[0m INFO 06-12 23:15:30 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:15:32 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 23:15:33 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:15:33 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1175094)[0m INFO 06-12 23:15:33 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1175094)[0m INFO 06-12 23:15:33 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:15:40 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:15:40 model_runner.py:953] Graph capturing finished in 7 secs.
[36m(RayWorkerWrapper pid=1175094)[0m INFO 06-12 23:15:40 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1175094)[0m INFO 06-12 23:15:40 model_runner.py:953] Graph capturing finished in 7 secs.
Using 2 GPU devices
1
data/test/xquad_trans_ar.json
cuda
INFO 06-12 23:16:16 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:16:21 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1177059)[0m INFO 06-12 23:16:21 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:16:21 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1177059)[0m INFO 06-12 23:16:22 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:16:22 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1177059)[0m INFO 06-12 23:16:22 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:16:24 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1177059)[0m INFO 06-12 23:16:24 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:16:25 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1177059)[0m INFO 06-12 23:16:25 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:16:45 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1177059)[0m INFO 06-12 23:16:45 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:16:47 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 23:16:48 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:16:48 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1177059)[0m INFO 06-12 23:16:48 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1177059)[0m INFO 06-12 23:16:48 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:16:54 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:16:54 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1177059)[0m INFO 06-12 23:16:54 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1177059)[0m INFO 06-12 23:16:54 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_trans_vi.json
cuda
INFO 06-12 23:17:32 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:17:37 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1179016)[0m INFO 06-12 23:17:37 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:17:37 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1179016)[0m INFO 06-12 23:17:38 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:17:38 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1179016)[0m INFO 06-12 23:17:38 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:17:39 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1179016)[0m INFO 06-12 23:17:39 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1179016)[0m INFO 06-12 23:17:40 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:17:40 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1179016)[0m INFO 06-12 23:18:01 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:18:01 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:18:02 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 23:18:04 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:18:04 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1179016)[0m INFO 06-12 23:18:04 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1179016)[0m INFO 06-12 23:18:04 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:18:10 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:18:10 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1179016)[0m INFO 06-12 23:18:10 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1179016)[0m INFO 06-12 23:18:10 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_trans_th.json
cuda
INFO 06-12 23:18:49 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:18:54 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1180971)[0m INFO 06-12 23:18:54 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:18:54 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1180971)[0m INFO 06-12 23:18:55 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:18:55 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1180971)[0m INFO 06-12 23:18:55 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:18:56 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1180971)[0m INFO 06-12 23:18:56 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:18:57 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1180971)[0m INFO 06-12 23:18:57 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:19:17 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1180971)[0m INFO 06-12 23:19:18 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:19:19 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 23:19:21 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:19:21 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1180971)[0m INFO 06-12 23:19:21 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1180971)[0m INFO 06-12 23:19:21 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:19:28 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:19:28 model_runner.py:953] Graph capturing finished in 7 secs.
[36m(RayWorkerWrapper pid=1180971)[0m INFO 06-12 23:19:28 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1180971)[0m INFO 06-12 23:19:28 model_runner.py:953] Graph capturing finished in 7 secs.
Using 2 GPU devices
1
data/test/xquad_trans_tr.json
cuda
INFO 06-12 23:20:13 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:20:18 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1182931)[0m INFO 06-12 23:20:18 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:20:18 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1182931)[0m INFO 06-12 23:20:19 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:20:19 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1182931)[0m INFO 06-12 23:20:19 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:20:20 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1182931)[0m INFO 06-12 23:20:20 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:20:21 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1182931)[0m INFO 06-12 23:20:21 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1182931)[0m INFO 06-12 23:20:42 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:20:42 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:20:43 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 23:20:44 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:20:44 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1182931)[0m INFO 06-12 23:20:44 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1182931)[0m INFO 06-12 23:20:44 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:20:51 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:20:51 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1182931)[0m INFO 06-12 23:20:51 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1182931)[0m INFO 06-12 23:20:51 model_runner.py:953] Graph capturing finished in 6 secs.
Using 2 GPU devices
1
data/test/xquad_trans_hi.json
cuda
INFO 06-12 23:21:27 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=slow, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 23:21:32 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1184909)[0m INFO 06-12 23:21:32 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 23:21:32 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1184909)[0m INFO 06-12 23:21:33 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 23:21:33 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1184909)[0m INFO 06-12 23:21:33 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 23:21:35 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1184909)[0m INFO 06-12 23:21:35 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 23:21:36 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1184909)[0m INFO 06-12 23:21:36 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 23:21:55 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1184909)[0m INFO 06-12 23:21:56 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 23:21:58 distributed_gpu_executor.py:45] # GPU blocks: 66837, # CPU blocks: 4096
INFO 06-12 23:21:59 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 23:21:59 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1184909)[0m INFO 06-12 23:21:59 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1184909)[0m INFO 06-12 23:21:59 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 23:22:06 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 23:22:06 model_runner.py:953] Graph capturing finished in 7 secs.
[36m(RayWorkerWrapper pid=1184909)[0m INFO 06-12 23:22:06 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1184909)[0m INFO 06-12 23:22:06 model_runner.py:953] Graph capturing finished in 7 secs.
Using 2 GPU devices
