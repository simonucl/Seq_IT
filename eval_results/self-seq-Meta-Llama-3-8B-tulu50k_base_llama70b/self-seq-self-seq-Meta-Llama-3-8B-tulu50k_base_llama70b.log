Loading data...
Loading model and tokenizer...
INFO 06-12 22:23:05 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:23:10 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=634304)[0m INFO 06-12 22:23:10 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:23:10 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=634304)[0m INFO 06-12 22:23:11 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:23:12 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=634304)[0m INFO 06-12 22:23:12 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:23:13 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=634304)[0m INFO 06-12 22:23:13 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:23:14 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=634304)[0m INFO 06-12 22:23:14 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:30:08 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=634304)[0m INFO 06-12 22:30:09 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:30:10 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 22:30:12 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:30:12 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=634304)[0m INFO 06-12 22:30:12 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=634304)[0m INFO 06-12 22:30:12 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:30:21 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:30:21 model_runner.py:953] Graph capturing finished in 9 secs.
[36m(RayWorkerWrapper pid=634304)[0m INFO 06-12 22:30:21 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=634304)[0m INFO 06-12 22:30:21 model_runner.py:953] Graph capturing finished in 9 secs.
Calculating accuracy...
Exact match : 0.4761182714177407
Loading data...
Loading model and tokenizer...
INFO 06-12 22:32:01 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:32:06 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=636441)[0m INFO 06-12 22:32:06 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:32:06 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=636441)[0m INFO 06-12 22:32:07 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:32:08 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=636441)[0m INFO 06-12 22:32:08 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:32:10 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=636441)[0m INFO 06-12 22:32:10 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=636441)[0m INFO 06-12 22:32:11 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:32:11 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=636441)[0m INFO 06-12 22:32:31 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:32:31 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:32:33 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 22:32:34 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:32:34 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=636441)[0m INFO 06-12 22:32:34 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=636441)[0m INFO 06-12 22:32:34 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:32:44 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:32:44 model_runner.py:953] Graph capturing finished in 10 secs.
[36m(RayWorkerWrapper pid=636441)[0m INFO 06-12 22:32:44 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=636441)[0m INFO 06-12 22:32:44 model_runner.py:953] Graph capturing finished in 10 secs.
Calculating accuracy...
Exact match for en: 0.464
Calculating accuracy...
Exact match for es: 0.424
Calculating accuracy...
Exact match for fr: 0.344
Calculating accuracy...
Exact match for de: 0.388
Calculating accuracy...
Exact match for ru: 0.384
Calculating accuracy...
Exact match for zh: 0.344
Calculating accuracy...
Exact match for ja: 0.292
Calculating accuracy...
Exact match for th: 0.292
Calculating accuracy...
Exact match for sw: 0.144
Calculating accuracy...
Exact match for bn: 0.216
Calculating accuracy...
Exact match for te: 0.14
Loading data...
Loading model and tokenizer...
INFO 06-12 22:38:11 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:38:15 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=638593)[0m INFO 06-12 22:38:15 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:38:15 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=638593)[0m INFO 06-12 22:38:16 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:38:18 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=638593)[0m INFO 06-12 22:38:18 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:38:19 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=638593)[0m INFO 06-12 22:38:19 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:38:20 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=638593)[0m INFO 06-12 22:38:20 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:38:40 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=638593)[0m INFO 06-12 22:38:41 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:38:42 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 22:38:44 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:38:44 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=638593)[0m INFO 06-12 22:38:44 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=638593)[0m INFO 06-12 22:38:44 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:38:53 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:38:53 model_runner.py:953] Graph capturing finished in 9 secs.
[36m(RayWorkerWrapper pid=638593)[0m INFO 06-12 22:38:53 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=638593)[0m INFO 06-12 22:38:53 model_runner.py:953] Graph capturing finished in 9 secs.
Calculating accuracy...
Exact match for en: 0.504
Calculating accuracy...
Exact match for es: 0.448
Calculating accuracy...
Exact match for fr: 0.452
Calculating accuracy...
Exact match for de: 0.412
Calculating accuracy...
Exact match for ru: 0.444
Calculating accuracy...
Exact match for zh: 0.412
Calculating accuracy...
Exact match for ja: 0.348
Calculating accuracy...
Exact match for th: 0.356
Calculating accuracy...
Exact match for sw: 0.204
Calculating accuracy...
Exact match for bn: 0.236
Calculating accuracy...
Exact match for te: 0.196
Number of examples: 164
INFO 06-12 22:45:58 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:46:02 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=640573)[0m INFO 06-12 22:46:02 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:46:03 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=640573)[0m INFO 06-12 22:46:03 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:46:04 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=640573)[0m INFO 06-12 22:46:04 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:46:05 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=640573)[0m INFO 06-12 22:46:05 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=640573)[0m INFO 06-12 22:46:06 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:46:06 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:46:26 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=640573)[0m INFO 06-12 22:46:27 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:46:28 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 22:46:29 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:46:29 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=640573)[0m INFO 06-12 22:46:29 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=640573)[0m INFO 06-12 22:46:29 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:46:35 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:46:35 model_runner.py:953] Graph capturing finished in 5 secs.
[36m(RayWorkerWrapper pid=640573)[0m INFO 06-12 22:46:35 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=640573)[0m INFO 06-12 22:46:35 model_runner.py:953] Graph capturing finished in 5 secs.
Reading samples...
Running test suites...
Writing results to results/codex_humaneval/{self-seq-self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b}_temp_0_8/codex_eval_predictions.jsonl_results.jsonl...
{'pass@10': 0.5737032402393347}
INFO 06-12 22:53:15 llm_engine.py:100] Initializing an LLM engine (v0.4.1) with config: model='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', speculative_config=None, tokenizer='simonycl/self-seq-Meta-Llama-3-8B-tulu50k_base_llama70b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), seed=0)
INFO 06-12 22:53:19 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
[36m(RayWorkerWrapper pid=1157456)[0m INFO 06-12 22:53:19 utils.py:620] Found nccl from library /root/.config/vllm/nccl/cu12/libnccl.so.2.18.1
INFO 06-12 22:53:20 selector.py:28] Using FlashAttention-2 backend.
[36m(RayWorkerWrapper pid=1157456)[0m INFO 06-12 22:53:20 selector.py:28] Using FlashAttention-2 backend.
INFO 06-12 22:53:22 pynccl_utils.py:43] vLLM is using nccl==2.18.1
[36m(RayWorkerWrapper pid=1157456)[0m INFO 06-12 22:53:22 pynccl_utils.py:43] vLLM is using nccl==2.18.1
INFO 06-12 22:53:23 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
[36m(RayWorkerWrapper pid=1157456)[0m INFO 06-12 22:53:23 utils.py:129] reading GPU P2P access cache from /root/.config/vllm/gpu_p2p_access_cache_for_0,1.json
INFO 06-12 22:53:24 weight_utils.py:199] Using model weights format ['*.bin']
[36m(RayWorkerWrapper pid=1157456)[0m INFO 06-12 22:53:24 weight_utils.py:199] Using model weights format ['*.bin']
INFO 06-12 22:53:44 model_runner.py:172] Loading model weights took 7.4829 GB
[36m(RayWorkerWrapper pid=1157456)[0m INFO 06-12 22:53:45 model_runner.py:172] Loading model weights took 7.4829 GB
INFO 06-12 22:53:46 distributed_gpu_executor.py:45] # GPU blocks: 61163, # CPU blocks: 4096
INFO 06-12 22:53:48 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 06-12 22:53:48 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=1157456)[0m INFO 06-12 22:53:48 model_runner.py:872] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerWrapper pid=1157456)[0m INFO 06-12 22:53:48 model_runner.py:876] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 06-12 22:53:54 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
INFO 06-12 22:53:54 model_runner.py:953] Graph capturing finished in 6 secs.
[36m(RayWorkerWrapper pid=1157456)[0m INFO 06-12 22:53:54 custom_all_reduce.py:246] Registering 2275 cuda graph addresses
[36m(RayWorkerWrapper pid=1157456)[0m INFO 06-12 22:53:54 model_runner.py:953] Graph capturing finished in 6 secs.
